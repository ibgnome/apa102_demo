#define MY_SPRITE_WIDTH  11
#define MY_SPRITE_HEIGHT 10
#define PACMAN_FRAMES  3
#define PINKY_FRAMES  2
#define MARIO_FRAMES  3
#define MARIO_SIZE 16
#define BROW_HEIGHT 14
#define BROW_WIDTH 24
#define POWER_PILL_SIZE  4

const uint8_t MarioData[] =
{
  B8_2BIT(00000111),B8_2BIT(11100000),
  B8_2BIT(00001111),B8_2BIT(11111100),
  B8_2BIT(00002222),B8_2BIT(33230000),
  B8_2BIT(00022323),B8_2BIT(33233300),
  B8_2BIT(00022322),B8_2BIT(33323330),
  B8_2BIT(00022233),B8_2BIT(33222200),
  B8_2BIT(00000333),B8_2BIT(33333000),
  B8_2BIT(00222221),B8_2BIT(12200000),
  B8_2BIT(33322221),B8_2BIT(11222333),
  B8_2BIT(33332221),B8_2BIT(31112233),
  B8_2BIT(33301111),B8_2BIT(11110220),
  B8_2BIT(00011111),B8_2BIT(11111220),
  B8_2BIT(00111111),B8_2BIT(11111220),
  B8_2BIT(02221110),B8_2BIT(01111220),
  B8_2BIT(02222000),B8_2BIT(00000000),
  B8_2BIT(00222200),B8_2BIT(00000000),

  B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000111),B8_2BIT(11100000),
  B8_2BIT(00001111),B8_2BIT(11111100),
  B8_2BIT(00002222),B8_2BIT(33230000),
  B8_2BIT(00022323),B8_2BIT(33233300),
  B8_2BIT(00022322),B8_2BIT(33323330),
  B8_2BIT(00022233),B8_2BIT(33222200),
  B8_2BIT(00000333),B8_2BIT(33333000),
  B8_2BIT(00002222),B8_2BIT(21233000),
  B8_2BIT(00033222),B8_2BIT(22233300),
  B8_2BIT(00333122),B8_2BIT(22233000),
  B8_2BIT(00222111),B8_2BIT(11110000),
  B8_2BIT(00221111),B8_2BIT(11110000),
  B8_2BIT(02221111),B8_2BIT(11100000),
  B8_2BIT(02200022),B8_2BIT(22000000),
  B8_2BIT(00000022),B8_2BIT(22200000),
 
  B8_2BIT(00000111),B8_2BIT(11100000),
  B8_2BIT(00001111),B8_2BIT(11111100),
  B8_2BIT(00002222),B8_2BIT(33230000),
  B8_2BIT(00022323),B8_2BIT(33233300),
  B8_2BIT(00022322),B8_2BIT(33323330),
  B8_2BIT(00022233),B8_2BIT(33222200),
  B8_2BIT(00000333),B8_2BIT(33333000),
  B8_2BIT(00022221),B8_2BIT(22200000),
  B8_2BIT(00222222),B8_2BIT(11220000),
  B8_2BIT(00222221),B8_2BIT(13113000),
  B8_2BIT(00222222),B8_2BIT(11111000),
  B8_2BIT(00112233),B8_2BIT(31111000),
  B8_2BIT(00011223),B8_2BIT(11110000),
  B8_2BIT(00001111),B8_2BIT(22220000),
  B8_2BIT(00002222),B8_2BIT(22222000),
  B8_2BIT(00002222),B8_2BIT(22000000)
};

const uint8_t MarioMask[] = 
{
  B8_2BIT(00000111),B8_2BIT(11100000),
  B8_2BIT(00001111),B8_2BIT(11111100),
  B8_2BIT(00001111),B8_2BIT(11110000),
  B8_2BIT(00011111),B8_2BIT(11111100),
  B8_2BIT(00011111),B8_2BIT(11111110),
  B8_2BIT(00011111),B8_2BIT(11111100),
  B8_2BIT(00000111),B8_2BIT(11111000),
  B8_2BIT(00111111),B8_2BIT(11100000),
  B8_2BIT(11111111),B8_2BIT(11111111),
  B8_2BIT(11111111),B8_2BIT(11111111),
  B8_2BIT(11101111),B8_2BIT(11110110),
  B8_2BIT(00011111),B8_2BIT(11111110),
  B8_2BIT(00111111),B8_2BIT(11111110),
  B8_2BIT(01111110),B8_2BIT(01111110),
  B8_2BIT(01111000),B8_2BIT(00000000),
  B8_2BIT(00111100),B8_2BIT(00000000),

  B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000111),B8_2BIT(11100000),
  B8_2BIT(00001111),B8_2BIT(11111100),
  B8_2BIT(00001111),B8_2BIT(11110000),
  B8_2BIT(00011111),B8_2BIT(11111100),
  B8_2BIT(00011111),B8_2BIT(11111110),
  B8_2BIT(00011111),B8_2BIT(11111100),
  B8_2BIT(00000111),B8_2BIT(11111000),
  B8_2BIT(00001111),B8_2BIT(11111000),
  B8_2BIT(00011111),B8_2BIT(11111100),
  B8_2BIT(00111111),B8_2BIT(11111000),
  B8_2BIT(00111111),B8_2BIT(11110000),
  B8_2BIT(00111111),B8_2BIT(11110000),
  B8_2BIT(01111111),B8_2BIT(11100000),
  B8_2BIT(01100011),B8_2BIT(11000000),
  B8_2BIT(00000011),B8_2BIT(11100000),

  B8_2BIT(00000111),B8_2BIT(11100000),
  B8_2BIT(00001111),B8_2BIT(11111100),
  B8_2BIT(00001111),B8_2BIT(11110000),
  B8_2BIT(00011111),B8_2BIT(11111100),
  B8_2BIT(00011111),B8_2BIT(11111110),
  B8_2BIT(00011111),B8_2BIT(11111100),
  B8_2BIT(00000111),B8_2BIT(11111000),
  B8_2BIT(00011111),B8_2BIT(11100000),
  B8_2BIT(00111111),B8_2BIT(11110000),
  B8_2BIT(00111111),B8_2BIT(11111000),
  B8_2BIT(00111111),B8_2BIT(11111000),
  B8_2BIT(00111111),B8_2BIT(11111000),
  B8_2BIT(00011111),B8_2BIT(11110000),
  B8_2BIT(00001111),B8_2BIT(11110000),
  B8_2BIT(00001111),B8_2BIT(11111000),
  B8_2BIT(00001111),B8_2BIT(11000000)
};

const struct CRGB MarioColTab[] =  {  CRGB::Red, CRGB(152,102,17), CRGB::Gold  };
const struct CRGB LuigiColTab[] =  {  CRGB::White, CRGB::Green, CRGB::Gold  };
//const struct CRGB MarioColTab[] =  {  CRGB(215,1,1), CRGB(112,104,1), CRGB(247,170,1)};
//const struct CRGB LuigiColTab[] =  {  CRGB::White, CRGB(38,127,0), CRGB(246,169,1)  };

const uint8_t MushroomData[] =
{
  B8_2BIT(00001111),B8_2BIT(11110000),
  B8_2BIT(00011223),B8_2BIT(32211000),
  B8_2BIT(00112223),B8_2BIT(32221100),
  B8_2BIT(01132233),B8_2BIT(33223110),
  B8_2BIT(01233333),B8_2BIT(33333210),
  B8_2BIT(11223322),B8_2BIT(22332211),
  B8_2BIT(12223222),B8_2BIT(22232221),
  B8_2BIT(12223222),B8_2BIT(22232221),
  B8_2BIT(12233222),B8_2BIT(22233221),
  B8_2BIT(13333322),B8_2BIT(22333331),
  B8_2BIT(13311111),B8_2BIT(11111331),
  B8_2BIT(11112212),B8_2BIT(21221111),
  B8_2BIT(01122212),B8_2BIT(21222110),
  B8_2BIT(00122222),B8_2BIT(22222100),
  B8_2BIT(00112222),B8_2BIT(22221100),
  B8_2BIT(00011111),B8_2BIT(11111000)
};

const uint8_t MushroomMask[] = 
{
  B8_2BIT(00001111),B8_2BIT(11110000),
  B8_2BIT(00011111),B8_2BIT(1111000),
  B8_2BIT(00111111),B8_2BIT(11111100),
  B8_2BIT(01111111),B8_2BIT(11111110),
  B8_2BIT(01111111),B8_2BIT(11111110),
  B8_2BIT(11111111),B8_2BIT(11111111),
  B8_2BIT(11111111),B8_2BIT(11111111),
  B8_2BIT(11111111),B8_2BIT(11111111),
  B8_2BIT(11111111),B8_2BIT(11111111),
  B8_2BIT(11111111),B8_2BIT(11111111),
  B8_2BIT(11111111),B8_2BIT(11111111),
  B8_2BIT(11111111),B8_2BIT(11111111),
  B8_2BIT(01111111),B8_2BIT(11111110),
  B8_2BIT(00111111),B8_2BIT(11111100),
  B8_2BIT(00111111),B8_2BIT(11111100),
  B8_2BIT(00011111),B8_2BIT(11111000)
};

const struct CRGB MushroomColTab[] =  {  CRGB::Black, CRGB::White, CRGB::Red  };

const uint8_t GoombaData[] =
{
  B8_2BIT(00000011),B8_2BIT(11000000),
  B8_2BIT(00000111),B8_2BIT(11100000),
  B8_2BIT(00001111),B8_2BIT(11110000),
  B8_2BIT(00011111),B8_2BIT(11111000),
  B8_2BIT(00122111),B8_2BIT(11122100),
  B8_2BIT(01113211),B8_2BIT(11231110),
  B8_2BIT(01113222),B8_2BIT(22231110),
  B8_2BIT(11113231),B8_2BIT(13231111),
  B8_2BIT(11113331),B8_2BIT(13331111),
  B8_2BIT(11111111),B8_2BIT(11111111),
  B8_2BIT(01111333),B8_2BIT(33311110),
  B8_2BIT(00003333),B8_2BIT(33330000),
  B8_2BIT(00003333),B8_2BIT(33332200),
  B8_2BIT(00022333),B8_2BIT(32222220),
  B8_2BIT(00022233),B8_2BIT(22222220),
  B8_2BIT(00002220),B8_2BIT(02222200),

  B8_2BIT(00000011),B8_2BIT(11000000),
  B8_2BIT(00000111),B8_2BIT(11100000),
  B8_2BIT(00001111),B8_2BIT(11110000),
  B8_2BIT(00011111),B8_2BIT(11111000),
  B8_2BIT(00122111),B8_2BIT(11122100),
  B8_2BIT(01113211),B8_2BIT(11231110),
  B8_2BIT(01113222),B8_2BIT(22231110),
  B8_2BIT(11113231),B8_2BIT(13231111),
  B8_2BIT(11113331),B8_2BIT(13331111),
  B8_2BIT(11111111),B8_2BIT(11111111),
  B8_2BIT(01111333),B8_2BIT(33311110),
  B8_2BIT(00003333),B8_2BIT(33330000),
  B8_2BIT(00223333),B8_2BIT(33330000),
  B8_2BIT(02222223),B8_2BIT(33322000),
  B8_2BIT(02222222),B8_2BIT(33222000),
  B8_2BIT(00222220),B8_2BIT(02220000)
};

const uint8_t GoombaMask[] =
{
  B8_2BIT(00000011),B8_2BIT(11000000),
  B8_2BIT(00000111),B8_2BIT(11100000),
  B8_2BIT(00001111),B8_2BIT(11110000),
  B8_2BIT(00011111),B8_2BIT(11111000),
  B8_2BIT(00111111),B8_2BIT(11111100),
  B8_2BIT(01111111),B8_2BIT(11111110),
  B8_2BIT(01111111),B8_2BIT(11111110),
  B8_2BIT(11111111),B8_2BIT(11111111),
  B8_2BIT(11111111),B8_2BIT(11111111),
  B8_2BIT(11111111),B8_2BIT(11111111),
  B8_2BIT(01111111),B8_2BIT(11111110),
  B8_2BIT(00001111),B8_2BIT(11110000),
  B8_2BIT(00001111),B8_2BIT(11111100),
  B8_2BIT(00011111),B8_2BIT(11111110),
  B8_2BIT(00011111),B8_2BIT(11111110),
  B8_2BIT(00001110),B8_2BIT(01111100),

  B8_2BIT(00000011),B8_2BIT(11000000),
  B8_2BIT(00000111),B8_2BIT(11100000),
  B8_2BIT(00001111),B8_2BIT(11110000),
  B8_2BIT(00011111),B8_2BIT(11111000),
  B8_2BIT(00111111),B8_2BIT(11111100),
  B8_2BIT(01111111),B8_2BIT(11111110),
  B8_2BIT(01111111),B8_2BIT(11111110),
  B8_2BIT(11111111),B8_2BIT(11111111),
  B8_2BIT(11111111),B8_2BIT(11111111),
  B8_2BIT(11111111),B8_2BIT(11111111),
  B8_2BIT(01111111),B8_2BIT(11111110),
  B8_2BIT(00001111),B8_2BIT(11110000),
  B8_2BIT(00111111),B8_2BIT(11110000),
  B8_2BIT(01111111),B8_2BIT(11111000),
  B8_2BIT(01111111),B8_2BIT(11111000),
  B8_2BIT(00111110),B8_2BIT(01110000)
};

const struct CRGB GoombaColTab[] =  {  CRGB(152,102,17), CRGB::Black, CRGB::White  };

const uint8_t BrowData[] =
{
  B8_3BIT(00111110),B8_3BIT(00000000),B8_3BIT(01111100),
  B8_3BIT(11110111),B8_3BIT(10000001),B8_3BIT(11101111),
  B8_3BIT(00000000),B8_3BIT(11000011),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000222),B8_3BIT(20000002),B8_3BIT(22200000),
  B8_3BIT(00022333),B8_3BIT(32000023),B8_3BIT(33322000),
  B8_3BIT(00233333),B8_3BIT(33200233),B8_3BIT(33333200),
  B8_3BIT(02333344),B8_3BIT(33200233),B8_3BIT(44333320),
  B8_3BIT(03333424),B8_3BIT(33200233),B8_3BIT(42433330),
  B8_3BIT(00333444),B8_3BIT(33000033),B8_3BIT(44433300),
  B8_3BIT(00033333),B8_3BIT(30000003),B8_3BIT(33333000),
  B8_3BIT(00003333),B8_3BIT(00000000),B8_3BIT(33330000),

  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00111110),B8_3BIT(00000000),B8_3BIT(01111100),
  B8_3BIT(11110111),B8_3BIT(10000001),B8_3BIT(11101111),
  B8_3BIT(00000000),B8_3BIT(11000011),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000222),B8_3BIT(20000002),B8_3BIT(22200000),
  B8_3BIT(00022333),B8_3BIT(32000023),B8_3BIT(33322000),
  B8_3BIT(00233333),B8_3BIT(33200233),B8_3BIT(33333200),
  B8_3BIT(02333344),B8_3BIT(33200233),B8_3BIT(44333320),
  B8_3BIT(03333424),B8_3BIT(33200233),B8_3BIT(42433330),
  B8_3BIT(00333444),B8_3BIT(33000033),B8_3BIT(44433300),
  B8_3BIT(00033333),B8_3BIT(30000003),B8_3BIT(33333000),
  B8_3BIT(00003333),B8_3BIT(00000000),B8_3BIT(33330000),

  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00111110),B8_3BIT(00000000),B8_3BIT(01111100),
  B8_3BIT(11110111),B8_3BIT(10000001),B8_3BIT(11101111),
  B8_3BIT(00000000),B8_3BIT(11000011),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000222),B8_3BIT(20000002),B8_3BIT(22200000),
  B8_3BIT(00022333),B8_3BIT(32000023),B8_3BIT(33322000),
  B8_3BIT(00233333),B8_3BIT(33200233),B8_3BIT(33333200),
  B8_3BIT(02333344),B8_3BIT(33200233),B8_3BIT(44333320),
  B8_3BIT(03333424),B8_3BIT(33200233),B8_3BIT(42433330),
  B8_3BIT(00333444),B8_3BIT(33000033),B8_3BIT(44433300),
  B8_3BIT(00033333),B8_3BIT(30000003),B8_3BIT(33333000),
  B8_3BIT(00003333),B8_3BIT(00000000),B8_3BIT(33330000),

  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00111110),B8_3BIT(00000000),B8_3BIT(01111100),
  B8_3BIT(11110111),B8_3BIT(10000001),B8_3BIT(11101111),
  B8_3BIT(00000000),B8_3BIT(11000011),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000222),B8_3BIT(20000002),B8_3BIT(22200000),
  B8_3BIT(00022333),B8_3BIT(32000023),B8_3BIT(33322000),
  B8_3BIT(00233333),B8_3BIT(33200233),B8_3BIT(33333200),
  B8_3BIT(02333344),B8_3BIT(33200233),B8_3BIT(44333320),
  B8_3BIT(03333424),B8_3BIT(33200233),B8_3BIT(42433330),
  B8_3BIT(00333444),B8_3BIT(33000033),B8_3BIT(44433300),
  B8_3BIT(00033333),B8_3BIT(30000003),B8_3BIT(33333000),
  B8_3BIT(00003333),B8_3BIT(00000000),B8_3BIT(33330000),

  B8_3BIT(00111110),B8_3BIT(00000000),B8_3BIT(01111100),
  B8_3BIT(11110111),B8_3BIT(10000001),B8_3BIT(11101111),
  B8_3BIT(00000000),B8_3BIT(11000011),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000222),B8_3BIT(20000002),B8_3BIT(22200000),
  B8_3BIT(00022333),B8_3BIT(32000023),B8_3BIT(33322000),
  B8_3BIT(00233333),B8_3BIT(33200233),B8_3BIT(33333200),
  B8_3BIT(02333344),B8_3BIT(33200233),B8_3BIT(44333320),
  B8_3BIT(03333424),B8_3BIT(33200233),B8_3BIT(42433330),
  B8_3BIT(00333444),B8_3BIT(33000033),B8_3BIT(44433300),
  B8_3BIT(00033333),B8_3BIT(30000003),B8_3BIT(33333000),
  B8_3BIT(00003333),B8_3BIT(00000000),B8_3BIT(33330000),

  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00111110),B8_3BIT(00000000),B8_3BIT(01111100),
  B8_3BIT(11110111),B8_3BIT(10000001),B8_3BIT(11101111),
  B8_3BIT(00000000),B8_3BIT(11000011),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000222),B8_3BIT(20000002),B8_3BIT(22200000),
  B8_3BIT(00022333),B8_3BIT(32000023),B8_3BIT(33322000),
  B8_3BIT(00233333),B8_3BIT(33200233),B8_3BIT(33333200),
  B8_3BIT(02333344),B8_3BIT(33200233),B8_3BIT(44333320),
  B8_3BIT(03333424),B8_3BIT(33200233),B8_3BIT(42433330),
  B8_3BIT(00333444),B8_3BIT(33000033),B8_3BIT(44433300),
  B8_3BIT(00033333),B8_3BIT(30000003),B8_3BIT(33333000),
  B8_3BIT(00003333),B8_3BIT(00000000),B8_3BIT(33330000),

  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00111110),B8_3BIT(00000000),B8_3BIT(01111100),
  B8_3BIT(11110111),B8_3BIT(10000001),B8_3BIT(11101111),
  B8_3BIT(00000000),B8_3BIT(11000011),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000222),B8_3BIT(20000002),B8_3BIT(22200000),
  B8_3BIT(00022333),B8_3BIT(32000023),B8_3BIT(33322000),
  B8_3BIT(00233333),B8_3BIT(33200233),B8_3BIT(33333200),
  B8_3BIT(02333344),B8_3BIT(33200233),B8_3BIT(44333320),
  B8_3BIT(03333424),B8_3BIT(33200233),B8_3BIT(42433330),
  B8_3BIT(00333444),B8_3BIT(33000033),B8_3BIT(44433300),
  B8_3BIT(00033333),B8_3BIT(30000003),B8_3BIT(33333000),
  B8_3BIT(00003333),B8_3BIT(00000000),B8_3BIT(33330000),

  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00111110),B8_3BIT(00000000),B8_3BIT(01111100),
  B8_3BIT(11110111),B8_3BIT(10000001),B8_3BIT(11101111),
  B8_3BIT(00000000),B8_3BIT(11000011),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000222),B8_3BIT(20000002),B8_3BIT(22200000),
  B8_3BIT(00022333),B8_3BIT(32000023),B8_3BIT(33322000),
  B8_3BIT(00233333),B8_3BIT(33200233),B8_3BIT(33333200),
  B8_3BIT(02333344),B8_3BIT(33200233),B8_3BIT(44333320),
  B8_3BIT(03333424),B8_3BIT(33200233),B8_3BIT(42433330),
  B8_3BIT(00333444),B8_3BIT(33000033),B8_3BIT(44433300),
  B8_3BIT(00033333),B8_3BIT(30000003),B8_3BIT(33333000),
  B8_3BIT(00003333),B8_3BIT(00000000),B8_3BIT(33330000),

  B8_3BIT(00111110),B8_3BIT(00000000),B8_3BIT(01111100),
  B8_3BIT(11110111),B8_3BIT(10000001),B8_3BIT(11101111),
  B8_3BIT(00000000),B8_3BIT(11000011),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000222),B8_3BIT(20000002),B8_3BIT(22200000),
  B8_3BIT(00022333),B8_3BIT(32000023),B8_3BIT(33322000),
  B8_3BIT(00233333),B8_3BIT(33200233),B8_3BIT(33333200),
  B8_3BIT(02333344),B8_3BIT(33200233),B8_3BIT(44333320),
  B8_3BIT(03333424),B8_3BIT(33200233),B8_3BIT(42433330),
  B8_3BIT(00333444),B8_3BIT(33000033),B8_3BIT(44433300),
  B8_3BIT(00033333),B8_3BIT(30000003),B8_3BIT(33333000),
  B8_3BIT(00003333),B8_3BIT(00000000),B8_3BIT(33330000),

  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00111110),B8_3BIT(00000000),B8_3BIT(01111100),
  B8_3BIT(11110111),B8_3BIT(10000001),B8_3BIT(11101111),
  B8_3BIT(00000000),B8_3BIT(11000011),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000222),B8_3BIT(20000002),B8_3BIT(22200000),
  B8_3BIT(00022333),B8_3BIT(32000023),B8_3BIT(33322000),
  B8_3BIT(00233333),B8_3BIT(33200233),B8_3BIT(33333200),
  B8_3BIT(02333344),B8_3BIT(33200233),B8_3BIT(44333320),
  B8_3BIT(03333424),B8_3BIT(33200233),B8_3BIT(42433330),
  B8_3BIT(00333444),B8_3BIT(33000033),B8_3BIT(44433300),
  B8_3BIT(00033333),B8_3BIT(30000003),B8_3BIT(33333000),
  B8_3BIT(00003333),B8_3BIT(00000000),B8_3BIT(33330000),

  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00111110),B8_3BIT(00000000),B8_3BIT(01111100),
  B8_3BIT(11110111),B8_3BIT(10000001),B8_3BIT(11101111),
  B8_3BIT(00000000),B8_3BIT(11000011),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000222),B8_3BIT(20000002),B8_3BIT(22200000),
  B8_3BIT(00022333),B8_3BIT(32000023),B8_3BIT(33322000),
  B8_3BIT(00233333),B8_3BIT(33200233),B8_3BIT(33333200),
  B8_3BIT(02333344),B8_3BIT(33200233),B8_3BIT(44333320),
  B8_3BIT(03333424),B8_3BIT(33200233),B8_3BIT(42433330),
  B8_3BIT(00333444),B8_3BIT(33000033),B8_3BIT(44433300),
  B8_3BIT(00033333),B8_3BIT(30000003),B8_3BIT(33333000),
  B8_3BIT(00003333),B8_3BIT(00000000),B8_3BIT(33330000),

  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00111110),B8_3BIT(00000000),B8_3BIT(01111100),
  B8_3BIT(11110111),B8_3BIT(10000001),B8_3BIT(11101111),
  B8_3BIT(00000000),B8_3BIT(11000011),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000222),B8_3BIT(20000002),B8_3BIT(22200000),
  B8_3BIT(00022333),B8_3BIT(32000023),B8_3BIT(33322000),
  B8_3BIT(00233333),B8_3BIT(33200233),B8_3BIT(33333200),
  B8_3BIT(02333344),B8_3BIT(33200233),B8_3BIT(44333320),
  B8_3BIT(03333424),B8_3BIT(33200233),B8_3BIT(42433330),
  B8_3BIT(00333444),B8_3BIT(33000033),B8_3BIT(44433300),
  B8_3BIT(00033333),B8_3BIT(30000003),B8_3BIT(33333000),
  B8_3BIT(00003333),B8_3BIT(00000000),B8_3BIT(33330000),

  B8_3BIT(00111110),B8_3BIT(00000000),B8_3BIT(01111100),
  B8_3BIT(11110111),B8_3BIT(10000001),B8_3BIT(11101111),
  B8_3BIT(00000000),B8_3BIT(11000011),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000222),B8_3BIT(20000002),B8_3BIT(22200000),
  B8_3BIT(00022333),B8_3BIT(32000023),B8_3BIT(33322000),
  B8_3BIT(00233333),B8_3BIT(33200233),B8_3BIT(33333200),
  B8_3BIT(02333344),B8_3BIT(33200233),B8_3BIT(44333320),
  B8_3BIT(03333424),B8_3BIT(33200233),B8_3BIT(42433330),
  B8_3BIT(00333444),B8_3BIT(33000033),B8_3BIT(44433300),
  B8_3BIT(00033333),B8_3BIT(30000003),B8_3BIT(33333000),
  B8_3BIT(00003333),B8_3BIT(00000000),B8_3BIT(33330000),

  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00111110),B8_3BIT(00000000),B8_3BIT(01111100),
  B8_3BIT(11110111),B8_3BIT(10000001),B8_3BIT(11101111),
  B8_3BIT(00000000),B8_3BIT(11000011),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000222),B8_3BIT(20000002),B8_3BIT(22200000),
  B8_3BIT(00022333),B8_3BIT(32000023),B8_3BIT(33322000),
  B8_3BIT(00233333),B8_3BIT(33200233),B8_3BIT(33333200),
  B8_3BIT(02333344),B8_3BIT(33200233),B8_3BIT(44333320),
  B8_3BIT(03333424),B8_3BIT(33200233),B8_3BIT(42433330),
  B8_3BIT(00333444),B8_3BIT(33000033),B8_3BIT(44433300),
  B8_3BIT(00033333),B8_3BIT(30000003),B8_3BIT(33333000),
  B8_3BIT(00003333),B8_3BIT(00000000),B8_3BIT(33330000),

  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00111110),B8_3BIT(00000000),B8_3BIT(01111100),
  B8_3BIT(11110111),B8_3BIT(10000001),B8_3BIT(11101111),
  B8_3BIT(00000000),B8_3BIT(11000011),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000222),B8_3BIT(20000002),B8_3BIT(22200000),
  B8_3BIT(00022333),B8_3BIT(32000023),B8_3BIT(33322000),
  B8_3BIT(00233333),B8_3BIT(33200233),B8_3BIT(33333200),
  B8_3BIT(02333344),B8_3BIT(33200233),B8_3BIT(44333320),
  B8_3BIT(03333424),B8_3BIT(33200233),B8_3BIT(42433330),
  B8_3BIT(00333444),B8_3BIT(33000033),B8_3BIT(44433300),
  B8_3BIT(00033333),B8_3BIT(30000003),B8_3BIT(33333000),
  B8_3BIT(00003333),B8_3BIT(00000000),B8_3BIT(33330000),

  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00111110),B8_3BIT(00000000),B8_3BIT(01111100),
  B8_3BIT(11110111),B8_3BIT(10000001),B8_3BIT(11101111),
  B8_3BIT(00000000),B8_3BIT(11000011),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000222),B8_3BIT(20000002),B8_3BIT(22200000),
  B8_3BIT(00022333),B8_3BIT(32000023),B8_3BIT(33322000),
  B8_3BIT(00233333),B8_3BIT(33200233),B8_3BIT(33333200),
  B8_3BIT(02333344),B8_3BIT(33200233),B8_3BIT(44333320),
  B8_3BIT(03333424),B8_3BIT(33200233),B8_3BIT(42433330),
  B8_3BIT(00333444),B8_3BIT(33000033),B8_3BIT(44433300),
  B8_3BIT(00033333),B8_3BIT(30000003),B8_3BIT(33333000),
  B8_3BIT(00003333),B8_3BIT(00000000),B8_3BIT(33330000),

  B8_3BIT(00111110),B8_3BIT(00000000),B8_3BIT(01111100),
  B8_3BIT(11110111),B8_3BIT(10000001),B8_3BIT(11101111),
  B8_3BIT(00000000),B8_3BIT(11000011),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000222),B8_3BIT(20000002),B8_3BIT(22200000),
  B8_3BIT(00022333),B8_3BIT(32000023),B8_3BIT(33322000),
  B8_3BIT(00233333),B8_3BIT(33200233),B8_3BIT(33333200),
  B8_3BIT(02333344),B8_3BIT(33200233),B8_3BIT(44333320),
  B8_3BIT(03333424),B8_3BIT(33200233),B8_3BIT(42433330),
  B8_3BIT(00333444),B8_3BIT(33000033),B8_3BIT(44433300),
  B8_3BIT(00033333),B8_3BIT(30000003),B8_3BIT(33333000),
  B8_3BIT(00003333),B8_3BIT(00000000),B8_3BIT(33330000),
  
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00111110),B8_3BIT(00000000),B8_3BIT(01111100),
  B8_3BIT(11110111),B8_3BIT(10000001),B8_3BIT(11101111),
  B8_3BIT(00000000),B8_3BIT(11000011),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000222),B8_3BIT(20000002),B8_3BIT(22200000),
  B8_3BIT(00022333),B8_3BIT(32000023),B8_3BIT(33322000),
  B8_3BIT(00233333),B8_3BIT(33200233),B8_3BIT(33333200),
  B8_3BIT(02333344),B8_3BIT(33200233),B8_3BIT(44333320),
  B8_3BIT(03333424),B8_3BIT(33200233),B8_3BIT(42433330),
  B8_3BIT(00333444),B8_3BIT(33000033),B8_3BIT(44433300),
  B8_3BIT(00033333),B8_3BIT(30000003),B8_3BIT(33333000),
  B8_3BIT(00003333),B8_3BIT(00000000),B8_3BIT(33330000),

  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00111110),B8_3BIT(00000000),B8_3BIT(01111100),
  B8_3BIT(11110111),B8_3BIT(10000001),B8_3BIT(11101111),
  B8_3BIT(00000000),B8_3BIT(11000011),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000222),B8_3BIT(20000002),B8_3BIT(22200000),
  B8_3BIT(00022333),B8_3BIT(32000023),B8_3BIT(33322000),
  B8_3BIT(00233333),B8_3BIT(33200233),B8_3BIT(33333200),
  B8_3BIT(02333344),B8_3BIT(33200233),B8_3BIT(44333320),
  B8_3BIT(03333424),B8_3BIT(33200233),B8_3BIT(42433330),
  B8_3BIT(00333444),B8_3BIT(33000033),B8_3BIT(44433300),
  B8_3BIT(00033333),B8_3BIT(30000003),B8_3BIT(33333000),
  B8_3BIT(00003333),B8_3BIT(00000000),B8_3BIT(33330000),

  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00111110),B8_3BIT(00000000),B8_3BIT(01111100),
  B8_3BIT(11110111),B8_3BIT(10000001),B8_3BIT(11101111),
  B8_3BIT(00000000),B8_3BIT(11000011),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00222222),B8_3BIT(22200222),B8_3BIT(22222200),
  B8_3BIT(02222222),B8_3BIT(22200222),B8_3BIT(22222220),
  B8_3BIT(00222222),B8_3BIT(22200222),B8_3BIT(22222200),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
};

const uint8_t BrowMask[] =
{
  B8_2BIT(00111110),B8_2BIT(00000000),B8_2BIT(01111100),
  B8_2BIT(11110111),B8_2BIT(10000001),B8_2BIT(11101111),
  B8_2BIT(00000000),B8_2BIT(11000011),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000111),B8_2BIT(10000001),B8_2BIT(11100000),
  B8_2BIT(00011111),B8_2BIT(11000011),B8_2BIT(11111000),
  B8_2BIT(00111111),B8_2BIT(11100111),B8_2BIT(11111100),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(00111111),B8_2BIT(11000011),B8_2BIT(11111100),
  B8_2BIT(00011111),B8_2BIT(10000001),B8_2BIT(11111000),
  B8_2BIT(00001111),B8_2BIT(00000000),B8_2BIT(11110000),

  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00111110),B8_2BIT(00000000),B8_2BIT(01111100),
  B8_2BIT(11110111),B8_2BIT(10000001),B8_2BIT(11101111),
  B8_2BIT(00000000),B8_2BIT(11000011),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000111),B8_2BIT(10000001),B8_2BIT(11100000),
  B8_2BIT(00011111),B8_2BIT(11000011),B8_2BIT(11111000),
  B8_2BIT(00111111),B8_2BIT(11100111),B8_2BIT(11111100),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(00111111),B8_2BIT(11000011),B8_2BIT(11111100),
  B8_2BIT(00011111),B8_2BIT(10000001),B8_2BIT(11111000),
  B8_2BIT(00001111),B8_2BIT(00000000),B8_2BIT(11110000),

  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00111110),B8_2BIT(00000000),B8_2BIT(01111100),
  B8_2BIT(11110111),B8_2BIT(10000001),B8_2BIT(11101111),
  B8_2BIT(00000000),B8_2BIT(11000011),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000111),B8_2BIT(10000001),B8_2BIT(11100000),
  B8_2BIT(00011111),B8_2BIT(11000011),B8_2BIT(11111000),
  B8_2BIT(00111111),B8_2BIT(11100111),B8_2BIT(11111100),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(00111111),B8_2BIT(11000011),B8_2BIT(11111100),
  B8_2BIT(00011111),B8_2BIT(10000001),B8_2BIT(11111000),
  B8_2BIT(00001111),B8_2BIT(00000000),B8_2BIT(11110000),

  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00111110),B8_2BIT(00000000),B8_2BIT(01111100),
  B8_2BIT(11110111),B8_2BIT(10000001),B8_2BIT(11101111),
  B8_2BIT(00000000),B8_2BIT(11000011),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000111),B8_2BIT(10000001),B8_2BIT(11100000),
  B8_2BIT(00011111),B8_2BIT(11000011),B8_2BIT(11111000),
  B8_2BIT(00111111),B8_2BIT(11100111),B8_2BIT(11111100),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(00111111),B8_2BIT(11000011),B8_2BIT(11111100),
  B8_2BIT(00011111),B8_2BIT(10000001),B8_2BIT(11111000),
  B8_2BIT(00001111),B8_2BIT(00000000),B8_2BIT(11110000),

  B8_2BIT(00111110),B8_2BIT(00000000),B8_2BIT(01111100),
  B8_2BIT(11110111),B8_2BIT(10000001),B8_2BIT(11101111),
  B8_2BIT(00000000),B8_2BIT(11000011),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000111),B8_2BIT(10000001),B8_2BIT(11100000),
  B8_2BIT(00011111),B8_2BIT(11000011),B8_2BIT(11111000),
  B8_2BIT(00111111),B8_2BIT(11100111),B8_2BIT(11111100),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(00111111),B8_2BIT(11000011),B8_2BIT(11111100),
  B8_2BIT(00011111),B8_2BIT(10000001),B8_2BIT(11111000),
  B8_2BIT(00001111),B8_2BIT(00000000),B8_2BIT(11110000),

  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00111110),B8_2BIT(00000000),B8_2BIT(01111100),
  B8_2BIT(11110111),B8_2BIT(10000001),B8_2BIT(11101111),
  B8_2BIT(00000000),B8_2BIT(11000011),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000111),B8_2BIT(10000001),B8_2BIT(11100000),
  B8_2BIT(00011111),B8_2BIT(11000011),B8_2BIT(11111000),
  B8_2BIT(00111111),B8_2BIT(11100111),B8_2BIT(11111100),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(00111111),B8_2BIT(11000011),B8_2BIT(11111100),
  B8_2BIT(00011111),B8_2BIT(10000001),B8_2BIT(11111000),
  B8_2BIT(00001111),B8_2BIT(00000000),B8_2BIT(11110000),

  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00111110),B8_2BIT(00000000),B8_2BIT(01111100),
  B8_2BIT(11110111),B8_2BIT(10000001),B8_2BIT(11101111),
  B8_2BIT(00000000),B8_2BIT(11000011),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000111),B8_2BIT(10000001),B8_2BIT(11100000),
  B8_2BIT(00011111),B8_2BIT(11000011),B8_2BIT(11111000),
  B8_2BIT(00111111),B8_2BIT(11100111),B8_2BIT(11111100),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(00111111),B8_2BIT(11000011),B8_2BIT(11111100),
  B8_2BIT(00011111),B8_2BIT(10000001),B8_2BIT(11111000),
  B8_2BIT(00001111),B8_2BIT(00000000),B8_2BIT(11110000),

  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00111110),B8_2BIT(00000000),B8_2BIT(01111100),
  B8_2BIT(11110111),B8_2BIT(10000001),B8_2BIT(11101111),
  B8_2BIT(00000000),B8_2BIT(11000011),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000111),B8_2BIT(10000001),B8_2BIT(11100000),
  B8_2BIT(00011111),B8_2BIT(11000011),B8_2BIT(11111000),
  B8_2BIT(00111111),B8_2BIT(11100111),B8_2BIT(11111100),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(00111111),B8_2BIT(11000011),B8_2BIT(11111100),
  B8_2BIT(00011111),B8_2BIT(10000001),B8_2BIT(11111000),
  B8_2BIT(00001111),B8_2BIT(00000000),B8_2BIT(11110000),

  B8_2BIT(00111110),B8_2BIT(00000000),B8_2BIT(01111100),
  B8_2BIT(11110111),B8_2BIT(10000001),B8_2BIT(11101111),
  B8_2BIT(00000000),B8_2BIT(11000011),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000111),B8_2BIT(10000001),B8_2BIT(11100000),
  B8_2BIT(00011111),B8_2BIT(11000011),B8_2BIT(11111000),
  B8_2BIT(00111111),B8_2BIT(11100111),B8_2BIT(11111100),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(00111111),B8_2BIT(11000011),B8_2BIT(11111100),
  B8_2BIT(00011111),B8_2BIT(10000001),B8_2BIT(11111000),
  B8_2BIT(00001111),B8_2BIT(00000000),B8_2BIT(11110000),

  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00111110),B8_2BIT(00000000),B8_2BIT(01111100),
  B8_2BIT(11110111),B8_2BIT(10000001),B8_2BIT(11101111),
  B8_2BIT(00000000),B8_2BIT(11000011),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000111),B8_2BIT(10000001),B8_2BIT(11100000),
  B8_2BIT(00011111),B8_2BIT(11000011),B8_2BIT(11111000),
  B8_2BIT(00111111),B8_2BIT(11100111),B8_2BIT(11111100),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(00111111),B8_2BIT(11000011),B8_2BIT(11111100),
  B8_2BIT(00011111),B8_2BIT(10000001),B8_2BIT(11111000),
  B8_2BIT(00001111),B8_2BIT(00000000),B8_2BIT(11110000),

  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00111110),B8_2BIT(00000000),B8_2BIT(01111100),
  B8_2BIT(11110111),B8_2BIT(10000001),B8_2BIT(11101111),
  B8_2BIT(00000000),B8_2BIT(11000011),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000111),B8_2BIT(10000001),B8_2BIT(11100000),
  B8_2BIT(00011111),B8_2BIT(11000011),B8_2BIT(11111000),
  B8_2BIT(00111111),B8_2BIT(11100111),B8_2BIT(11111100),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(00111111),B8_2BIT(11000011),B8_2BIT(11111100),
  B8_2BIT(00011111),B8_2BIT(10000001),B8_2BIT(11111000),
  B8_2BIT(00001111),B8_2BIT(00000000),B8_2BIT(11110000),

  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00111110),B8_2BIT(00000000),B8_2BIT(01111100),
  B8_2BIT(11110111),B8_2BIT(10000001),B8_2BIT(11101111),
  B8_2BIT(00000000),B8_2BIT(11000011),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000111),B8_2BIT(10000001),B8_2BIT(11100000),
  B8_2BIT(00011111),B8_2BIT(11000011),B8_2BIT(11111000),
  B8_2BIT(00111111),B8_2BIT(11100111),B8_2BIT(11111100),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(00111111),B8_2BIT(11000011),B8_2BIT(11111100),
  B8_2BIT(00011111),B8_2BIT(10000001),B8_2BIT(11111000),
  B8_2BIT(00001111),B8_2BIT(00000000),B8_2BIT(11110000),

  B8_2BIT(00111110),B8_2BIT(00000000),B8_2BIT(01111100),
  B8_2BIT(11110111),B8_2BIT(10000001),B8_2BIT(11101111),
  B8_2BIT(00000000),B8_2BIT(11000011),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000111),B8_2BIT(10000001),B8_2BIT(11100000),
  B8_2BIT(00011111),B8_2BIT(11000011),B8_2BIT(11111000),
  B8_2BIT(00111111),B8_2BIT(11100111),B8_2BIT(11111100),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(00111111),B8_2BIT(11000011),B8_2BIT(11111100),
  B8_2BIT(00011111),B8_2BIT(10000001),B8_2BIT(11111000),
  B8_2BIT(00001111),B8_2BIT(00000000),B8_2BIT(11110000),

  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00111110),B8_2BIT(00000000),B8_2BIT(01111100),
  B8_2BIT(11110111),B8_2BIT(10000001),B8_2BIT(11101111),
  B8_2BIT(00000000),B8_2BIT(11000011),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000111),B8_2BIT(10000001),B8_2BIT(11100000),
  B8_2BIT(00011111),B8_2BIT(11000011),B8_2BIT(11111000),
  B8_2BIT(00111111),B8_2BIT(11100111),B8_2BIT(11111100),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(00111111),B8_2BIT(11000011),B8_2BIT(11111100),
  B8_2BIT(00011111),B8_2BIT(10000001),B8_2BIT(11111000),
  B8_2BIT(00001111),B8_2BIT(00000000),B8_2BIT(11110000),

  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00111110),B8_2BIT(00000000),B8_2BIT(01111100),
  B8_2BIT(11110111),B8_2BIT(10000001),B8_2BIT(11101111),
  B8_2BIT(00000000),B8_2BIT(11000011),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000111),B8_2BIT(10000001),B8_2BIT(11100000),
  B8_2BIT(00011111),B8_2BIT(11000011),B8_2BIT(11111000),
  B8_2BIT(00111111),B8_2BIT(11100111),B8_2BIT(11111100),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(00111111),B8_2BIT(11000011),B8_2BIT(11111100),
  B8_2BIT(00011111),B8_2BIT(10000001),B8_2BIT(11111000),
  B8_2BIT(00001111),B8_2BIT(00000000),B8_2BIT(11110000),

  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00111110),B8_2BIT(00000000),B8_2BIT(01111100),
  B8_2BIT(11110111),B8_2BIT(10000001),B8_2BIT(11101111),
  B8_2BIT(00000000),B8_2BIT(11000011),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000111),B8_2BIT(10000001),B8_2BIT(11100000),
  B8_2BIT(00011111),B8_2BIT(11000011),B8_2BIT(11111000),
  B8_2BIT(00111111),B8_2BIT(11100111),B8_2BIT(11111100),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(00111111),B8_2BIT(11000011),B8_2BIT(11111100),
  B8_2BIT(00011111),B8_2BIT(10000001),B8_2BIT(11111000),
  B8_2BIT(00001111),B8_2BIT(00000000),B8_2BIT(11110000),

  B8_2BIT(00111110),B8_2BIT(00000000),B8_2BIT(01111100),
  B8_2BIT(11110111),B8_2BIT(10000001),B8_2BIT(11101111),
  B8_2BIT(00000000),B8_2BIT(11000011),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000111),B8_2BIT(10000001),B8_2BIT(11100000),
  B8_2BIT(00011111),B8_2BIT(11000011),B8_2BIT(11111000),
  B8_2BIT(00111111),B8_2BIT(11100111),B8_2BIT(11111100),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(00111111),B8_2BIT(11000011),B8_2BIT(11111100),
  B8_2BIT(00011111),B8_2BIT(10000001),B8_2BIT(11111000),
  B8_2BIT(00001111),B8_2BIT(00000000),B8_2BIT(11110000),

  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00111110),B8_2BIT(00000000),B8_2BIT(01111100),
  B8_2BIT(11110111),B8_2BIT(10000001),B8_2BIT(11101111),
  B8_2BIT(00000000),B8_2BIT(11000011),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000111),B8_2BIT(10000001),B8_2BIT(11100000),
  B8_2BIT(00011111),B8_2BIT(11000011),B8_2BIT(11111000),
  B8_2BIT(00111111),B8_2BIT(11100111),B8_2BIT(11111100),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(00111111),B8_2BIT(11000011),B8_2BIT(11111100),
  B8_2BIT(00011111),B8_2BIT(10000001),B8_2BIT(11111000),
  B8_2BIT(00001111),B8_2BIT(00000000),B8_2BIT(11110000),

  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00111110),B8_2BIT(00000000),B8_2BIT(01111100),
  B8_2BIT(11110111),B8_2BIT(10000001),B8_2BIT(11101111),
  B8_2BIT(00000000),B8_2BIT(11000011),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000111),B8_2BIT(10000001),B8_2BIT(11100000),
  B8_2BIT(00011111),B8_2BIT(11000011),B8_2BIT(11111000),
  B8_2BIT(00111111),B8_2BIT(11100111),B8_2BIT(11111100),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(00111111),B8_2BIT(11000011),B8_2BIT(11111100),
  B8_2BIT(00011111),B8_2BIT(10000001),B8_2BIT(11111000),
  B8_2BIT(00001111),B8_2BIT(00000000),B8_2BIT(11110000),

  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00111110),B8_3BIT(00000000),B8_3BIT(01111100),
  B8_3BIT(11110111),B8_3BIT(10000001),B8_3BIT(11101111),
  B8_3BIT(00000000),B8_3BIT(11000011),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00111111),B8_3BIT(11100111),B8_3BIT(11111100),
  B8_3BIT(01111111),B8_3BIT(11100111),B8_3BIT(11111110),
  B8_3BIT(00111111),B8_3BIT(11100111),B8_3BIT(11111100),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
};

const struct CRGB BrowColTab[] =  {  CRGB(152,102,17), CRGB::Black, CRGB::White, CRGB::DarkGreen }; 

const uint8_t CompCubeData[] =
{
  B8_2BIT(01111011),B8_2BIT(10111100),
  B8_2BIT(11111211),B8_2BIT(12111110),
  B8_2BIT(11111223),B8_2BIT(22111110),
  B8_2BIT(11112223),B8_2BIT(22211110),
  B8_2BIT(11122211),B8_2BIT(12221110),
  B8_2BIT(02222111),B8_2BIT(11222200),
  B8_2BIT(11221131),B8_2BIT(31122110),
  B8_2BIT(11331333),B8_2BIT(33133110),
  B8_2BIT(11221133),B8_2BIT(31122110),
  B8_2BIT(02222113),B8_2BIT(11222200),
  B8_2BIT(11122211),B8_2BIT(12221110),
  B8_2BIT(11112223),B8_2BIT(22211110),
  B8_2BIT(11112223),B8_2BIT(22211110),
  B8_2BIT(11111211),B8_2BIT(12111110),
  B8_2BIT(01111011),B8_2BIT(10111100)
};

const uint8_t CompCubeMask[] =
{
  B8_2BIT(01111011),B8_2BIT(10111100),
  B8_2BIT(11111111),B8_2BIT(11111110),
  B8_2BIT(11111111),B8_2BIT(11111110),
  B8_2BIT(11111111),B8_2BIT(11111110),
  B8_2BIT(11111111),B8_2BIT(11111110),
  B8_2BIT(01111111),B8_2BIT(11111100),
  B8_2BIT(11111111),B8_2BIT(11111110),
  B8_2BIT(11111111),B8_2BIT(11111110),
  B8_2BIT(11111111),B8_2BIT(11111110),
  B8_2BIT(01111111),B8_2BIT(11111100),
  B8_2BIT(11111111),B8_2BIT(11111110),
  B8_2BIT(11111111),B8_2BIT(11111111),
  B8_2BIT(11111111),B8_2BIT(11111110),
  B8_2BIT(11111111),B8_2BIT(11111110),
  B8_2BIT(01111011),B8_2BIT(10111100)
};

const struct CRGB CompCubeColTab[] =  {  CRGB::White, CHSV(128,128,120), CRGB::Purple  };

const uint8_t MausData[] =
{
   B8_4BIT(00011110),B8_4BIT(00000000),B8_4BIT(11110000),
   B8_4BIT(00111111),B8_4BIT(00000001),B8_4BIT(11111000),
   B8_4BIT(01111111),B8_4BIT(10000011),B8_4BIT(11111100),
   B8_4BIT(11111111),B8_4BIT(11000111),B8_4BIT(11111110),
   B8_4BIT(11111111),B8_4BIT(11000111),B8_4BIT(11111110),
   B8_4BIT(11111111),B8_4BIT(11111111),B8_4BIT(11111110),
   B8_4BIT(11111111),B8_4BIT(22111221),B8_4BIT(11111110),
   B8_4BIT(01111112),B8_4BIT(22111222),B8_4BIT(11111100),
   B8_4BIT(00111112),B8_4BIT(21111122),B8_4BIT(11111000),
   B8_4BIT(00011111),B8_4BIT(11111111),B8_4BIT(11110000),
   B8_4BIT(00000012),B8_4BIT(22222222),B8_4BIT(10000000),
   B8_4BIT(00000012),B8_4BIT(22222222),B8_4BIT(10000000),
   B8_4BIT(00000012),B8_4BIT(22222222),B8_4BIT(10000000),
   B8_4BIT(00000011),B8_4BIT(22222221),B8_4BIT(10000000),
   B8_4BIT(00000001),B8_4BIT(12222211),B8_4BIT(00000000),
   B8_4BIT(00000000),B8_4BIT(11111110),B8_4BIT(00000000),

   B8_4BIT(00033330),B8_4BIT(00000000),B8_4BIT(33330000),
   B8_4BIT(00333333),B8_4BIT(00000003),B8_4BIT(33333000),
   B8_4BIT(03333333),B8_4BIT(30000033),B8_4BIT(33333300),
   B8_4BIT(33333333),B8_4BIT(33000333),B8_4BIT(33333330),
   B8_4BIT(33333333),B8_4BIT(33000333),B8_4BIT(33333330),
   B8_4BIT(33333333),B8_4BIT(33333333),B8_4BIT(33333330),
   B8_4BIT(33333333),B8_4BIT(22333223),B8_4BIT(33333330),
   B8_4BIT(03333332),B8_4BIT(22333222),B8_4BIT(33333300),
   B8_4BIT(00333332),B8_4BIT(23333322),B8_4BIT(33333000),
   B8_4BIT(00033333),B8_4BIT(33333333),B8_4BIT(33330000),
   B8_4BIT(00000032),B8_4BIT(22222222),B8_4BIT(30000000),
   B8_4BIT(00000032),B8_4BIT(22222222),B8_4BIT(30000000),
   B8_4BIT(00000032),B8_4BIT(22222222),B8_4BIT(30000000),
   B8_4BIT(00000033),B8_4BIT(22222223),B8_4BIT(30000000),
   B8_4BIT(00000003),B8_4BIT(32222233),B8_4BIT(00000000),
   B8_4BIT(00000000),B8_4BIT(33333330),B8_4BIT(00000000),

   B8_4BIT(00044440),B8_4BIT(00000000),B8_4BIT(44440000),
   B8_4BIT(00444444),B8_4BIT(00000004),B8_4BIT(44444000),
   B8_4BIT(04444444),B8_4BIT(40000044),B8_4BIT(44444400),
   B8_4BIT(44444444),B8_4BIT(44000444),B8_4BIT(44444440),
   B8_4BIT(44444444),B8_4BIT(44000444),B8_4BIT(44444440),
   B8_4BIT(44444444),B8_4BIT(44444444),B8_4BIT(44444440),
   B8_4BIT(44444444),B8_4BIT(22444224),B8_4BIT(44444440),
   B8_4BIT(04444442),B8_4BIT(22444222),B8_4BIT(44444400),
   B8_4BIT(00444442),B8_4BIT(24444422),B8_4BIT(44444000),
   B8_4BIT(00044444),B8_4BIT(44444444),B8_4BIT(44440000),
   B8_4BIT(00000042),B8_4BIT(22222222),B8_4BIT(40000000),
   B8_4BIT(00000042),B8_4BIT(22222222),B8_4BIT(40000000),
   B8_4BIT(00000042),B8_4BIT(22222222),B8_4BIT(40000000),
   B8_4BIT(00000044),B8_4BIT(22222224),B8_4BIT(40000000),
   B8_4BIT(00000004),B8_4BIT(42222244),B8_4BIT(00000000),
   B8_4BIT(00000000),B8_4BIT(44444440),B8_4BIT(00000000),

   B8_4BIT(00055550),B8_4BIT(00000000),B8_4BIT(55550000),
   B8_4BIT(00555555),B8_4BIT(00000005),B8_4BIT(55555000),
   B8_4BIT(05555555),B8_4BIT(50000055),B8_4BIT(55555500),
   B8_4BIT(55555555),B8_4BIT(55000555),B8_4BIT(55555550),
   B8_4BIT(55555555),B8_4BIT(55000555),B8_4BIT(55555550),
   B8_4BIT(55555555),B8_4BIT(55555555),B8_4BIT(55555550),
   B8_4BIT(55555555),B8_4BIT(22555225),B8_4BIT(55555550),
   B8_4BIT(05555552),B8_4BIT(22555222),B8_4BIT(55555500),
   B8_4BIT(00555552),B8_4BIT(25555522),B8_4BIT(55555000),
   B8_4BIT(00055555),B8_4BIT(55555555),B8_4BIT(55550000),
   B8_4BIT(00000052),B8_4BIT(22222222),B8_4BIT(50000000),
   B8_4BIT(00000052),B8_4BIT(22222222),B8_4BIT(50000000),
   B8_4BIT(00000052),B8_4BIT(22222222),B8_4BIT(50000000),
   B8_4BIT(00000055),B8_4BIT(22222225),B8_4BIT(50000000),
   B8_4BIT(00000005),B8_4BIT(52222255),B8_4BIT(00000000),
   B8_4BIT(00000000),B8_4BIT(55555550),B8_4BIT(00000000),

   B8_4BIT(00066660),B8_4BIT(00000000),B8_4BIT(66660000),
   B8_4BIT(00666666),B8_4BIT(00000006),B8_4BIT(66666000),
   B8_4BIT(06666666),B8_4BIT(60000066),B8_4BIT(66666600),
   B8_4BIT(66666666),B8_4BIT(66000666),B8_4BIT(66666660),
   B8_4BIT(66666666),B8_4BIT(66000666),B8_4BIT(66666660),
   B8_4BIT(66666666),B8_4BIT(66666666),B8_4BIT(66666660),
   B8_4BIT(66666666),B8_4BIT(22666226),B8_4BIT(66666660),
   B8_4BIT(06666662),B8_4BIT(22666222),B8_4BIT(66666600),
   B8_4BIT(00666662),B8_4BIT(26666622),B8_4BIT(66666000),
   B8_4BIT(00066666),B8_4BIT(66666666),B8_4BIT(66660000),
   B8_4BIT(00000062),B8_4BIT(22222222),B8_4BIT(60000000),
   B8_4BIT(00000062),B8_4BIT(22222222),B8_4BIT(60000000),
   B8_4BIT(00000062),B8_4BIT(22222222),B8_4BIT(60000000),
   B8_4BIT(00000066),B8_4BIT(22222226),B8_4BIT(60000000),
   B8_4BIT(00000006),B8_4BIT(62222266),B8_4BIT(00000000),
   B8_4BIT(00000000),B8_4BIT(66666660),B8_4BIT(00000000),

   B8_4BIT(00077770),B8_4BIT(00000000),B8_4BIT(77770000),
   B8_4BIT(00777777),B8_4BIT(00000007),B8_4BIT(77777000),
   B8_4BIT(07777777),B8_4BIT(70000077),B8_4BIT(77777700),
   B8_4BIT(77777777),B8_4BIT(77000777),B8_4BIT(77777770),
   B8_4BIT(77777777),B8_4BIT(77000777),B8_4BIT(77777770),
   B8_4BIT(77777777),B8_4BIT(77777777),B8_4BIT(77777770),
   B8_4BIT(77777777),B8_4BIT(22777227),B8_4BIT(77777770),
   B8_4BIT(07777772),B8_4BIT(22777222),B8_4BIT(77777700),
   B8_4BIT(00777772),B8_4BIT(27777722),B8_4BIT(77777000),
   B8_4BIT(00077777),B8_4BIT(77777777),B8_4BIT(77770000),
   B8_4BIT(00000072),B8_4BIT(22222222),B8_4BIT(70000000),
   B8_4BIT(00000072),B8_4BIT(22222222),B8_4BIT(70000000),
   B8_4BIT(00000072),B8_4BIT(22222222),B8_4BIT(70000000),
   B8_4BIT(00000077),B8_4BIT(22222227),B8_4BIT(70000000),
   B8_4BIT(00000007),B8_4BIT(72222277),B8_4BIT(00000000),
   B8_4BIT(00000000),B8_4BIT(77777770),B8_4BIT(00000000),

   B8_4BIT(00088880),B8_4BIT(00000000),B8_4BIT(88880000),
   B8_4BIT(00888888),B8_4BIT(00000008),B8_4BIT(88888000),
   B8_4BIT(08888888),B8_4BIT(80000088),B8_4BIT(88888800),
   B8_4BIT(88888888),B8_4BIT(88000888),B8_4BIT(88888880),
   B8_4BIT(88888888),B8_4BIT(88000888),B8_4BIT(88888880),
   B8_4BIT(88888888),B8_4BIT(88888888),B8_4BIT(88888880),
   B8_4BIT(88888888),B8_4BIT(22888228),B8_4BIT(88888880),
   B8_4BIT(08888882),B8_4BIT(22888222),B8_4BIT(88888800),
   B8_4BIT(00888882),B8_4BIT(28888822),B8_4BIT(88888000),
   B8_4BIT(00088888),B8_4BIT(88888888),B8_4BIT(88880000),
   B8_4BIT(00000082),B8_4BIT(22222222),B8_4BIT(80000000),
   B8_4BIT(00000082),B8_4BIT(22222222),B8_4BIT(80000000),
   B8_4BIT(00000082),B8_4BIT(22222222),B8_4BIT(80000000),
   B8_4BIT(00000088),B8_4BIT(22222228),B8_4BIT(80000000),
   B8_4BIT(00000008),B8_4BIT(82222288),B8_4BIT(00000000),
   B8_4BIT(00000000),B8_4BIT(88888880),B8_4BIT(00000000)
                                                     
};

const uint8_t MausMask[] =
{
   B8_2BIT(00011110),B8_2BIT(00000000),B8_2BIT(11110000),
   B8_2BIT(00111111),B8_2BIT(00000001),B8_2BIT(11111000),
   B8_2BIT(01111111),B8_2BIT(10000011),B8_2BIT(11111100),
   B8_2BIT(11111111),B8_2BIT(11000111),B8_2BIT(11111110),
   B8_2BIT(11111111),B8_2BIT(11000111),B8_2BIT(11111110),
   B8_2BIT(11111111),B8_2BIT(11111111),B8_2BIT(11111110),
   B8_2BIT(11111111),B8_2BIT(11111111),B8_2BIT(11111110),
   B8_2BIT(01111111),B8_2BIT(11111111),B8_2BIT(11111100),
   B8_2BIT(00111111),B8_2BIT(11111111),B8_2BIT(11111000),
   B8_2BIT(00011111),B8_2BIT(11111111),B8_2BIT(11110000),
   B8_2BIT(00000011),B8_2BIT(11111111),B8_2BIT(10000000),
   B8_2BIT(00000011),B8_2BIT(11111111),B8_2BIT(10000000),
   B8_2BIT(00000011),B8_2BIT(11111111),B8_2BIT(10000000),
   B8_2BIT(00000011),B8_2BIT(11111111),B8_2BIT(10000000),
   B8_2BIT(00000001),B8_2BIT(11111111),B8_2BIT(00000000),
   B8_2BIT(00000000),B8_2BIT(11111110),B8_2BIT(00000000),

   B8_2BIT(00011110),B8_2BIT(00000000),B8_2BIT(11110000),
   B8_2BIT(00111111),B8_2BIT(00000001),B8_2BIT(11111000),
   B8_2BIT(01111111),B8_2BIT(10000011),B8_2BIT(11111100),
   B8_2BIT(11111111),B8_2BIT(11000111),B8_2BIT(11111110),
   B8_2BIT(11111111),B8_2BIT(11000111),B8_2BIT(11111110),
   B8_2BIT(11111111),B8_2BIT(11111111),B8_2BIT(11111110),
   B8_2BIT(11111111),B8_2BIT(11111111),B8_2BIT(11111110),
   B8_2BIT(01111111),B8_2BIT(11111111),B8_2BIT(11111100),
   B8_2BIT(00111111),B8_2BIT(11111111),B8_2BIT(11111000),
   B8_2BIT(00011111),B8_2BIT(11111111),B8_2BIT(11110000),
   B8_2BIT(00000011),B8_2BIT(11111111),B8_2BIT(10000000),
   B8_2BIT(00000011),B8_2BIT(11111111),B8_2BIT(10000000),
   B8_2BIT(00000011),B8_2BIT(11111111),B8_2BIT(10000000),
   B8_2BIT(00000011),B8_2BIT(11111111),B8_2BIT(10000000),
   B8_2BIT(00000001),B8_2BIT(11111111),B8_2BIT(00000000),
   B8_2BIT(00000000),B8_2BIT(11111110),B8_2BIT(00000000),

   B8_2BIT(00011110),B8_2BIT(00000000),B8_2BIT(11110000),
   B8_2BIT(00111111),B8_2BIT(00000001),B8_2BIT(11111000),
   B8_2BIT(01111111),B8_2BIT(10000011),B8_2BIT(11111100),
   B8_2BIT(11111111),B8_2BIT(11000111),B8_2BIT(11111110),
   B8_2BIT(11111111),B8_2BIT(11000111),B8_2BIT(11111110),
   B8_2BIT(11111111),B8_2BIT(11111111),B8_2BIT(11111110),
   B8_2BIT(11111111),B8_2BIT(11111111),B8_2BIT(11111110),
   B8_2BIT(01111111),B8_2BIT(11111111),B8_2BIT(11111100),
   B8_2BIT(00111111),B8_2BIT(11111111),B8_2BIT(11111000),
   B8_2BIT(00011111),B8_2BIT(11111111),B8_2BIT(11110000),
   B8_2BIT(00000011),B8_2BIT(11111111),B8_2BIT(10000000),
   B8_2BIT(00000011),B8_2BIT(11111111),B8_2BIT(10000000),
   B8_2BIT(00000011),B8_2BIT(11111111),B8_2BIT(10000000),
   B8_2BIT(00000011),B8_2BIT(11111111),B8_2BIT(10000000),
   B8_2BIT(00000001),B8_2BIT(11111111),B8_2BIT(00000000),
   B8_2BIT(00000000),B8_2BIT(11111110),B8_2BIT(00000000),

   B8_2BIT(00011110),B8_2BIT(00000000),B8_2BIT(11110000),
   B8_2BIT(00111111),B8_2BIT(00000001),B8_2BIT(11111000),
   B8_2BIT(01111111),B8_2BIT(10000011),B8_2BIT(11111100),
   B8_2BIT(11111111),B8_2BIT(11000111),B8_2BIT(11111110),
   B8_2BIT(11111111),B8_2BIT(11000111),B8_2BIT(11111110),
   B8_2BIT(11111111),B8_2BIT(11111111),B8_2BIT(11111110),
   B8_2BIT(11111111),B8_2BIT(11111111),B8_2BIT(11111110),
   B8_2BIT(01111111),B8_2BIT(11111111),B8_2BIT(11111100),
   B8_2BIT(00111111),B8_2BIT(11111111),B8_2BIT(11111000),
   B8_2BIT(00011111),B8_2BIT(11111111),B8_2BIT(11110000),
   B8_2BIT(00000011),B8_2BIT(11111111),B8_2BIT(10000000),
   B8_2BIT(00000011),B8_2BIT(11111111),B8_2BIT(10000000),
   B8_2BIT(00000011),B8_2BIT(11111111),B8_2BIT(10000000),
   B8_2BIT(00000011),B8_2BIT(11111111),B8_2BIT(10000000),
   B8_2BIT(00000001),B8_2BIT(11111111),B8_2BIT(00000000),
   B8_2BIT(00000000),B8_2BIT(11111110),B8_2BIT(00000000),

   B8_2BIT(00011110),B8_2BIT(00000000),B8_2BIT(11110000),
   B8_2BIT(00111111),B8_2BIT(00000001),B8_2BIT(11111000),
   B8_2BIT(01111111),B8_2BIT(10000011),B8_2BIT(11111100),
   B8_2BIT(11111111),B8_2BIT(11000111),B8_2BIT(11111110),
   B8_2BIT(11111111),B8_2BIT(11000111),B8_2BIT(11111110),
   B8_2BIT(11111111),B8_2BIT(11111111),B8_2BIT(11111110),
   B8_2BIT(11111111),B8_2BIT(11111111),B8_2BIT(11111110),
   B8_2BIT(01111111),B8_2BIT(11111111),B8_2BIT(11111100),
   B8_2BIT(00111111),B8_2BIT(11111111),B8_2BIT(11111000),
   B8_2BIT(00011111),B8_2BIT(11111111),B8_2BIT(11110000),
   B8_2BIT(00000011),B8_2BIT(11111111),B8_2BIT(10000000),
   B8_2BIT(00000011),B8_2BIT(11111111),B8_2BIT(10000000),
   B8_2BIT(00000011),B8_2BIT(11111111),B8_2BIT(10000000),
   B8_2BIT(00000011),B8_2BIT(11111111),B8_2BIT(10000000),
   B8_2BIT(00000001),B8_2BIT(11111111),B8_2BIT(00000000),
   B8_2BIT(00000000),B8_2BIT(11111110),B8_2BIT(00000000),

   B8_2BIT(00011110),B8_2BIT(00000000),B8_2BIT(11110000),
   B8_2BIT(00111111),B8_2BIT(00000001),B8_2BIT(11111000),
   B8_2BIT(01111111),B8_2BIT(10000011),B8_2BIT(11111100),
   B8_2BIT(11111111),B8_2BIT(11000111),B8_2BIT(11111110),
   B8_2BIT(11111111),B8_2BIT(11000111),B8_2BIT(11111110),
   B8_2BIT(11111111),B8_2BIT(11111111),B8_2BIT(11111110),
   B8_2BIT(11111111),B8_2BIT(11111111),B8_2BIT(11111110),
   B8_2BIT(01111111),B8_2BIT(11111111),B8_2BIT(11111100),
   B8_2BIT(00111111),B8_2BIT(11111111),B8_2BIT(11111000),
   B8_2BIT(00011111),B8_2BIT(11111111),B8_2BIT(11110000),
   B8_2BIT(00000011),B8_2BIT(11111111),B8_2BIT(10000000),
   B8_2BIT(00000011),B8_2BIT(11111111),B8_2BIT(10000000),
   B8_2BIT(00000011),B8_2BIT(11111111),B8_2BIT(10000000),
   B8_2BIT(00000011),B8_2BIT(11111111),B8_2BIT(10000000),
   B8_2BIT(00000001),B8_2BIT(11111111),B8_2BIT(00000000),
   B8_2BIT(00000000),B8_2BIT(11111110),B8_2BIT(00000000),

   B8_2BIT(00011110),B8_2BIT(00000000),B8_2BIT(11110000),
   B8_2BIT(00111111),B8_2BIT(00000001),B8_2BIT(11111000),
   B8_2BIT(01111111),B8_2BIT(10000011),B8_2BIT(11111100),
   B8_2BIT(11111111),B8_2BIT(11000111),B8_2BIT(11111110),
   B8_2BIT(11111111),B8_2BIT(11000111),B8_2BIT(11111110),
   B8_2BIT(11111111),B8_2BIT(11111111),B8_2BIT(11111110),
   B8_2BIT(11111111),B8_2BIT(11111111),B8_2BIT(11111110),
   B8_2BIT(01111111),B8_2BIT(11111111),B8_2BIT(11111100),
   B8_2BIT(00111111),B8_2BIT(11111111),B8_2BIT(11111000),
   B8_2BIT(00011111),B8_2BIT(11111111),B8_2BIT(11110000),
   B8_2BIT(00000011),B8_2BIT(11111111),B8_2BIT(10000000),
   B8_2BIT(00000011),B8_2BIT(11111111),B8_2BIT(10000000),
   B8_2BIT(00000011),B8_2BIT(11111111),B8_2BIT(10000000),
   B8_2BIT(00000011),B8_2BIT(11111111),B8_2BIT(10000000),
   B8_2BIT(00000001),B8_2BIT(11111111),B8_2BIT(00000000),
   B8_2BIT(00000000),B8_2BIT(11111110),B8_2BIT(00000000)
};

const struct CRGB MausColTab[] =  {  CRGB::Yellow, CRGB::White, CRGB::Green, CRGB::Blue, CRGB::Purple, CRGB::Red, CRGB::Orange, CRGB::Pink  };

const uint8_t PowerPillData[] = 
{
  B8_1BIT(01100000),
  B8_1BIT(11110000),
  B8_1BIT(11110000),
  B8_1BIT(01100000)
};
const struct CRGB PowerPillColTab[] =  {  CRGB(48, 48, 255)  };

const uint8_t PacmanRightData[] = 
{
  // Pacman Open
  B8_2BIT(00021112),B8_2BIT(00000000),
  B8_2BIT(00111111),B8_2BIT(10000000),
  B8_2BIT(01111111),B8_2BIT(00000000),
  B8_2BIT(21111110),B8_2BIT(00000000),
  B8_2BIT(11111000),B8_2BIT(00000000),
  B8_2BIT(11111000),B8_2BIT(00000000),
  B8_2BIT(21111110),B8_2BIT(00000000),
  B8_2BIT(01111111),B8_2BIT(00000000),
  B8_2BIT(00111111),B8_2BIT(10000000),
  B8_2BIT(00021112),B8_2BIT(00000000),
  // Pacman Half
  B8_2BIT(00021112),B8_2BIT(00000000),
  B8_2BIT(00111111),B8_2BIT(10000000),
  B8_2BIT(01111111),B8_2BIT(11000000),
  B8_2BIT(21111111),B8_2BIT(11200000),
  B8_2BIT(11111200),B8_2BIT(00000000),
  B8_2BIT(11111200),B8_2BIT(00000000),
  B8_2BIT(21111111),B8_2BIT(11200000),
  B8_2BIT(01111111),B8_2BIT(11000000),
  B8_2BIT(00111111),B8_2BIT(10000000),
  B8_2BIT(00021112),B8_2BIT(00000000),
  // Pacman Closed
  B8_2BIT(00021112),B8_2BIT(00000000),
  B8_2BIT(00111111),B8_2BIT(10000000),
  B8_2BIT(01111111),B8_2BIT(11000000),
  B8_2BIT(21111111),B8_2BIT(11200000),
  B8_2BIT(11111111),B8_2BIT(11100000),
  B8_2BIT(11111111),B8_2BIT(11100000),
  B8_2BIT(21111111),B8_2BIT(11200000),
  B8_2BIT(01111111),B8_2BIT(11000000),
  B8_2BIT(00111111),B8_2BIT(10000000),
  B8_2BIT(00021112),B8_2BIT(00000000)
};
const uint8_t PacmanRightMask[] = 
{
  // Pacman Open
  B8_1BIT(00011111),B8_1BIT(00000000),
  B8_1BIT(00111111),B8_1BIT(10000000),
  B8_1BIT(01111111),B8_1BIT(00000000),
  B8_1BIT(11111110),B8_1BIT(00000000),
  B8_1BIT(11111000),B8_1BIT(00000000),
  B8_1BIT(11111000),B8_1BIT(00000000),
  B8_1BIT(11111110),B8_1BIT(00000000),
  B8_1BIT(01111111),B8_1BIT(00000000),
  B8_1BIT(00111111),B8_1BIT(10000000),
  B8_1BIT(00011111),B8_1BIT(00000000),
  // Pacman Half
  B8_1BIT(00011111),B8_1BIT(00000000),
  B8_1BIT(00111111),B8_1BIT(10000000),
  B8_1BIT(01111111),B8_1BIT(11000000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(11111100),B8_1BIT(00000000),
  B8_1BIT(11111100),B8_1BIT(00000000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(01111111),B8_1BIT(11000000),
  B8_1BIT(00111111),B8_1BIT(10000000),
  B8_1BIT(00011111),B8_1BIT(00000000),
  // Pacman Closed
  B8_1BIT(00011111),B8_1BIT(00000000),
  B8_1BIT(00111111),B8_1BIT(10000000),
  B8_1BIT(01111111),B8_1BIT(11000000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(01111111),B8_1BIT(11000000),
  B8_1BIT(00111111),B8_1BIT(10000000),
  B8_1BIT(00011111),B8_1BIT(00000000)
};
const struct CRGB PacmanRightColTab[] =  {  CRGB(255, 255, 0), CRGB(100, 100, 0), CRGB(255, 255, 255)  };

const uint8_t PinkyData[] = 
{
  // Pinky Frame 1
  B8_2BIT(00001110),B8_2BIT(00000000),
  B8_2BIT(00111111),B8_2BIT(10000000),
  B8_2BIT(01111111),B8_2BIT(11000000),
  B8_2BIT(01122212),B8_2BIT(22000000),
  B8_2BIT(11122312),B8_2BIT(23100000),
  B8_2BIT(11122212),B8_2BIT(22100000),
  B8_2BIT(11111111),B8_2BIT(11100000),
  B8_2BIT(11111111),B8_2BIT(11100000),
  B8_2BIT(11111111),B8_2BIT(11100000),
  B8_2BIT(11001110),B8_2BIT(01100000),
  // Pinky Frame 2
  B8_2BIT(00001110),B8_2BIT(00000000),
  B8_2BIT(00111111),B8_2BIT(10000000),
  B8_2BIT(01111111),B8_2BIT(11000000),
  B8_2BIT(01122212),B8_2BIT(22000000),
  B8_2BIT(11122312),B8_2BIT(23100000),
  B8_2BIT(11122212),B8_2BIT(22100000),
  B8_2BIT(11111111),B8_2BIT(11100000),
  B8_2BIT(11111111),B8_2BIT(11100000),
  B8_2BIT(11111111),B8_2BIT(11100000),
  B8_2BIT(10011011),B8_2BIT(00100000),
};
const uint8_t PinkyMask[] = 
{
  // Pinky Frame 1
  B8_1BIT(00001110),B8_1BIT(00000000),
  B8_1BIT(00111111),B8_1BIT(10000000),
  B8_1BIT(01111111),B8_1BIT(11000000),
  B8_1BIT(01111111),B8_1BIT(11000000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(11001110),B8_1BIT(01100000),
  // Pinky Frame 2
  B8_1BIT(00001110),B8_1BIT(00000000),
  B8_1BIT(00111111),B8_1BIT(10000000),
  B8_1BIT(01111111),B8_1BIT(11000000),
  B8_1BIT(01111111),B8_1BIT(11000000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(10011011),B8_1BIT(00100000),
};

const struct CRGB PinkyColTab[] =  {  CRGB(255, 0, 0), CRGB(255, 255, 255), CRGB(0, 0, 255)  };
const struct CRGB BlinkyColTab[] =  {  CRGB::Pink, CRGB(255, 255, 255), CRGB(0, 0, 255)  };
const struct CRGB InkyColTab[] =  {  CRGB::Cyan, CRGB(255, 255, 255), CRGB(0, 0, 255)  };
const struct CRGB ClydeColTab[] =  {  CRGB::Orange, CRGB(255, 255, 255), CRGB(0, 0, 255)  };
const uint8_t PacmanLeftData[] = 
{
  // Pacman Open
  B8_2BIT(00021112),B8_2BIT(00000000),
  B8_2BIT(00111111),B8_2BIT(10000000),
  B8_2BIT(00011111),B8_2BIT(11000000),
  B8_2BIT(00001111),B8_2BIT(11200000),
  B8_2BIT(00000011),B8_2BIT(11100000),
  B8_2BIT(00000011),B8_2BIT(11100000),
  B8_2BIT(00001111),B8_2BIT(11200000),
  B8_2BIT(00011111),B8_2BIT(11000000),
  B8_2BIT(00111111),B8_2BIT(10000000),
  B8_2BIT(00021112),B8_2BIT(00000000),
  // Pacman Half
  B8_2BIT(00021112),B8_2BIT(00000000),
  B8_2BIT(00111111),B8_2BIT(10000000),
  B8_2BIT(01111111),B8_2BIT(11000000),
  B8_2BIT(21111111),B8_2BIT(11200000),
  B8_2BIT(00000211),B8_2BIT(11100000),
  B8_2BIT(00000211),B8_2BIT(11100000),
  B8_2BIT(21111111),B8_2BIT(11200000),
  B8_2BIT(01111111),B8_2BIT(11000000),
  B8_2BIT(00111111),B8_2BIT(10000000),
  B8_2BIT(00021112),B8_2BIT(00000000),
  // Pacman Closed
  B8_2BIT(00021112),B8_2BIT(00000000),
  B8_2BIT(00111111),B8_2BIT(10000000),
  B8_2BIT(01111111),B8_2BIT(11000000),
  B8_2BIT(21111111),B8_2BIT(11200000),
  B8_2BIT(11111111),B8_2BIT(11100000),
  B8_2BIT(11111111),B8_2BIT(11100000),
  B8_2BIT(21111111),B8_2BIT(11200000),
  B8_2BIT(01111111),B8_2BIT(11000000),
  B8_2BIT(00111111),B8_2BIT(10000000),
  B8_2BIT(00021112),B8_2BIT(00000000)
};
const uint8_t PacmanLeftMask[] = 
{
  // Pacman Open
  B8_1BIT(00011111),B8_1BIT(00000000),
  B8_1BIT(00111111),B8_1BIT(10000000),
  B8_1BIT(00011111),B8_1BIT(11000000),
  B8_1BIT(00001111),B8_1BIT(11100000),
  B8_1BIT(00000011),B8_1BIT(11100000),
  B8_1BIT(00000011),B8_1BIT(11100000),
  B8_1BIT(00001111),B8_1BIT(11100000),
  B8_1BIT(00011111),B8_1BIT(11000000),
  B8_1BIT(00111111),B8_1BIT(10000000),
  B8_1BIT(00011111),B8_1BIT(00000000),
  // Pacman Half
  B8_1BIT(00011111),B8_1BIT(00000000),
  B8_1BIT(00111111),B8_1BIT(10000000),
  B8_1BIT(01111111),B8_1BIT(11000000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(00000111),B8_1BIT(11100000),
  B8_1BIT(00000111),B8_1BIT(11100000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(01111111),B8_1BIT(11000000),
  B8_1BIT(00111111),B8_1BIT(10000000),
  B8_1BIT(00011111),B8_1BIT(00000000),
  // Pacman Closed
  B8_1BIT(00011111),B8_1BIT(00000000),
  B8_1BIT(00111111),B8_1BIT(10000000),
  B8_1BIT(01111111),B8_1BIT(11000000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(01111111),B8_1BIT(11000000),
  B8_1BIT(00111111),B8_1BIT(10000000),
  B8_1BIT(00011111),B8_1BIT(00000000)
};
const struct CRGB PacmanLeftColTab[] =  {  CRGB(255, 255, 0), CRGB(100, 100, 0), CRGB(255, 255, 255)  };

const uint8_t GhostData[] = 
{
  // Ghost Frame 1
  B8_2BIT(00001110),B8_2BIT(00000000),
  B8_2BIT(00111111),B8_2BIT(10000000),
  B8_2BIT(01111111),B8_2BIT(11000000),
  B8_2BIT(01122122),B8_2BIT(11000000),
  B8_2BIT(11122122),B8_2BIT(11100000),
  B8_2BIT(11111111),B8_2BIT(11100000),
  B8_2BIT(11131313),B8_2BIT(11100000),
  B8_2BIT(11313131),B8_2BIT(31100000),
  B8_2BIT(11111111),B8_2BIT(11100000),
  B8_2BIT(11001110),B8_2BIT(01100000),
  // Ghost Frame 2
  B8_2BIT(00001110),B8_2BIT(00000000),
  B8_2BIT(00111111),B8_2BIT(10000000),
  B8_2BIT(01111111),B8_2BIT(11000000),
  B8_2BIT(01122122),B8_2BIT(11000000),
  B8_2BIT(11122122),B8_2BIT(11100000),
  B8_2BIT(11111111),B8_2BIT(11100000),
  B8_2BIT(11131313),B8_2BIT(11100000),
  B8_2BIT(11313131),B8_2BIT(31100000),
  B8_2BIT(11111111),B8_2BIT(11100000),
  B8_2BIT(10011011),B8_2BIT(00100000)
};
const uint8_t GhostMask[] = 
{
  // Ghost Frame 1
  B8_1BIT(00001110),B8_1BIT(00000000),
  B8_1BIT(00111111),B8_1BIT(10000000),
  B8_1BIT(01111111),B8_1BIT(11000000),
  B8_1BIT(01111111),B8_1BIT(11000000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(11001110),B8_1BIT(01100000),
  // Ghost Frame 2
  B8_1BIT(00001110),B8_1BIT(00000000),
  B8_1BIT(00111111),B8_1BIT(10000000),
  B8_1BIT(01111111),B8_1BIT(11000000),
  B8_1BIT(01111111),B8_1BIT(11000000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(10011011),B8_1BIT(00100000)
};
const struct CRGB GhostColTab[] =  {  CRGB(0, 0, 255), CRGB(255, 255, 255), CRGB(255, 90, 120)  };

const uint8_t OctorokData[] =
{
  B8_2BIT(00100100),B8_2BIT(00000000),
  B8_2BIT(00110110),B8_2BIT(11000000),
  B8_2BIT(00111111),B8_2BIT(10000000),
  B8_2BIT(01111122),B8_2BIT(11110000),
  B8_2BIT(01111222),B8_2BIT(22110001),
  B8_2BIT(12111200),B8_2BIT(02100001),
  B8_2BIT(11121120),B8_2BIT(00211111),
  B8_2BIT(21111122),B8_2BIT(22211111),
  B8_2BIT(21111122),B8_2BIT(22211111),
  B8_2BIT(11121120),B8_2BIT(00211111),
  B8_2BIT(12111200),B8_2BIT(02100001),
  B8_2BIT(01111222),B8_2BIT(22110001),
  B8_2BIT(01111122),B8_2BIT(11110000),
  B8_2BIT(00111111),B8_2BIT(10000000),
  B8_2BIT(00110110),B8_2BIT(11000000),
  B8_2BIT(00100100),B8_2BIT(00000000),

  B8_2BIT(01001000),B8_2BIT(10000000),
  B8_2BIT(01101101),B8_2BIT(10000000),
  B8_2BIT(00111111),B8_2BIT(10010000),
  B8_2BIT(01111122),B8_2BIT(11110000),
  B8_2BIT(01112222),B8_2BIT(22100100),
  B8_2BIT(12111200),B8_2BIT(02101100),
  B8_2BIT(11121120),B8_2BIT(00211100),
  B8_2BIT(21111122),B8_2BIT(22211100),
  B8_2BIT(21111122),B8_2BIT(22211100),
  B8_2BIT(11121120),B8_2BIT(00211100),
  B8_2BIT(12111200),B8_2BIT(02101100),
  B8_2BIT(01112222),B8_2BIT(22100100),
  B8_2BIT(01111122),B8_2BIT(11110000),
  B8_2BIT(00111111),B8_2BIT(10010000),
  B8_2BIT(01101101),B8_2BIT(10000000),
  B8_2BIT(01001000),B8_2BIT(10000000)
};

const uint8_t OctorokMask[] = 
{
  B8_2BIT(00100100),B8_2BIT(00000000),
  B8_2BIT(00110110),B8_2BIT(11000000),
  B8_2BIT(00111111),B8_2BIT(10000000),
  B8_2BIT(01111111),B8_2BIT(11110000),
  B8_2BIT(01111111),B8_2BIT(11110001),
  B8_2BIT(11111100),B8_2BIT(01100001),
  B8_2BIT(11111110),B8_2BIT(00111111),
  B8_2BIT(11111111),B8_2BIT(11111111),
  B8_2BIT(11111111),B8_2BIT(11111111),
  B8_2BIT(11111110),B8_2BIT(00111111),
  B8_2BIT(11111100),B8_2BIT(01100001),
  B8_2BIT(01111111),B8_2BIT(11110001),
  B8_2BIT(01111111),B8_2BIT(11110000),
  B8_2BIT(00111111),B8_2BIT(10000000),
  B8_2BIT(00110110),B8_2BIT(11000000),
  B8_2BIT(00100100),B8_2BIT(00000000),

  B8_2BIT(01001000),B8_2BIT(10000000),
  B8_2BIT(01101101),B8_2BIT(10000000),
  B8_2BIT(00111111),B8_2BIT(10010000),
  B8_2BIT(01111111),B8_2BIT(11110000),
  B8_2BIT(01111111),B8_2BIT(11100100),
  B8_2BIT(11111100),B8_2BIT(01101100),
  B8_2BIT(11111110),B8_2BIT(00211100),
  B8_2BIT(11111111),B8_2BIT(11111100),
  B8_2BIT(11111111),B8_2BIT(11111100),
  B8_2BIT(11111110),B8_2BIT(00111100),
  B8_2BIT(11111100),B8_2BIT(01101100),
  B8_2BIT(01111111),B8_2BIT(11100100),
  B8_2BIT(01111111),B8_2BIT(11110000),
  B8_2BIT(00111111),B8_2BIT(10010000),
  B8_2BIT(01101101),B8_2BIT(10000000),
  B8_2BIT(01001000),B8_2BIT(10000000)
};

const struct CRGB OctorokColTab[] =  { CRGB(248,556,0), CRGB(252,224,168)};


const uint8_t LinkData[] =
{
  B8_2BIT(00000111),B8_2BIT(10000000),
  B8_2BIT(00011111),B8_2BIT(22220000),
  B8_2BIT(01113112),B8_2BIT(22222000),
  B8_2BIT(11113322),B8_2BIT(22220000),
  B8_2BIT(10113332),B8_2BIT(33130020),
  B8_2BIT(00122332),B8_2BIT(33233320),
  B8_2BIT(00022233),B8_2BIT(33330020),
  B8_2BIT(00001111),B8_2BIT(33330020),
  B8_2BIT(00211111),B8_2BIT(11222320),
  B8_2BIT(02221333),B8_2BIT(11122320),
  B8_2BIT(02222333),B8_2BIT(11122020),
  B8_2BIT(02222331),B8_2BIT(11200020),
  B8_2BIT(00122112),B8_2BIT(22200000),
  B8_2BIT(01111111),B8_2BIT(11100000),
  B8_2BIT(00002222),B8_2BIT(00000000),
  B8_2BIT(00002222),B8_2BIT(20000000),

  B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00001111),B8_2BIT(00000000),
  B8_2BIT(00111111),B8_2BIT(22220000),
  B8_2BIT(01113112),B8_2BIT(22222000),
  B8_2BIT(11113322),B8_2BIT(22220000),
  B8_2BIT(10113332),B8_2BIT(33130000),
  B8_2BIT(00122332),B8_2BIT(33233300),
  B8_2BIT(00022233),B8_2BIT(33330200),
  B8_2BIT(00001111),B8_2BIT(33330200),
  B8_2BIT(00122113),B8_2BIT(33223200),
  B8_2BIT(00222223),B8_2BIT(33123200),
  B8_2BIT(01222223),B8_2BIT(31120200),
  B8_2BIT(01122221),B8_2BIT(11200200),
  B8_2BIT(22111112),B8_2BIT(22210200),
  B8_2BIT(22211111),B8_2BIT(11122000),
  B8_2BIT(02220000),B8_2BIT(02220000)
};

const uint8_t LinkMask[] = 
{
  B8_2BIT(00000111),B8_2BIT(10000000),
  B8_2BIT(00011111),B8_2BIT(11110000),
  B8_2BIT(01111111),B8_2BIT(11111000),
  B8_2BIT(11111111),B8_2BIT(11110000),
  B8_2BIT(10111111),B8_2BIT(11110010),
  B8_2BIT(00111111),B8_2BIT(11111110),
  B8_2BIT(00011111),B8_2BIT(11110010),
  B8_2BIT(00001111),B8_2BIT(11110010),
  B8_2BIT(00111111),B8_2BIT(11111110),
  B8_2BIT(01111111),B8_2BIT(11111110),
  B8_2BIT(01111111),B8_2BIT(11111010),
  B8_2BIT(01111111),B8_2BIT(11100010),
  B8_2BIT(00111111),B8_2BIT(11100000),
  B8_2BIT(01111111),B8_2BIT(11100000),
  B8_2BIT(00001111),B8_2BIT(00000000),
  B8_2BIT(00001111),B8_2BIT(10000000),

  B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00001111),B8_2BIT(00000000),
  B8_2BIT(00111111),B8_2BIT(11110000),
  B8_2BIT(01111111),B8_2BIT(11111000),
  B8_2BIT(11111111),B8_2BIT(11110000),
  B8_2BIT(10111111),B8_2BIT(11110000),
  B8_2BIT(00111111),B8_2BIT(11111100),
  B8_2BIT(00011111),B8_2BIT(11110100),
  B8_2BIT(00001111),B8_2BIT(11110100),
  B8_2BIT(00111111),B8_2BIT(11111100),
  B8_2BIT(00111111),B8_2BIT(11111100),
  B8_2BIT(01111111),B8_2BIT(11110100),
  B8_2BIT(01111111),B8_2BIT(11100100),
  B8_2BIT(11111111),B8_2BIT(11110100),
  B8_2BIT(11111111),B8_2BIT(11111000),
  B8_2BIT(01110000),B8_2BIT(01110000)
};

const struct CRGB LinkColTab[] =  { CRGB(0,255,0), CRGB(177,62,0), CRGB(255,140,27)};


const uint8_t FairyData[] =
{
  B8_2BIT(00000233),B8_2BIT(32000000),
  B8_2BIT(00000323),B8_2BIT(23000000),
  B8_2BIT(00001333),B8_2BIT(33310000),
  B8_2BIT(00001322),B8_2BIT(23310000),
  B8_2BIT(00001322),B8_2BIT(23310000),
  B8_2BIT(00000132),B8_2BIT(33100000),
  B8_2BIT(00000322),B8_2BIT(23100000),
  B8_2BIT(00000232),B8_2BIT(32000000),
  B8_2BIT(00000213),B8_2BIT(12000000),
  B8_2BIT(00002133),B8_2BIT(31200000),
  B8_2BIT(00000023),B8_2BIT(20100000),
  B8_2BIT(00000022),B8_2BIT(23000000),
  B8_2BIT(00000022),B8_2BIT(00000000),
  B8_2BIT(00000020),B8_2BIT(00000000),
  B8_2BIT(00000020),B8_2BIT(00000000),
  B8_2BIT(00000030),B8_2BIT(00000000),
  
  B8_2BIT(00000233),B8_2BIT(32000000),
  B8_2BIT(00000323),B8_2BIT(23000000),
  B8_2BIT(00000333),B8_2BIT(33300000),
  B8_2BIT(00000322),B8_2BIT(23300000),
  B8_2BIT(00000122),B8_2BIT(23310000),
  B8_2BIT(00001332),B8_2BIT(33010000),
  B8_2BIT(00001322),B8_2BIT(23110000),
  B8_2BIT(00001232),B8_2BIT(31100000),
  B8_2BIT(00000203),B8_2BIT(02100000),
  B8_2BIT(00002033),B8_2BIT(30210000),
  B8_2BIT(00000023),B8_2BIT(20000000),
  B8_2BIT(00000022),B8_2BIT(23000000),
  B8_2BIT(00000022),B8_2BIT(00000000),
  B8_2BIT(00000020),B8_2BIT(00000000),
  B8_2BIT(00000020),B8_2BIT(00000000),
  B8_2BIT(00000030),B8_2BIT(00000000)
};

const uint8_t FairyMask[] = 
{ B8_2BIT(10000111),B8_2BIT(11000001),
  B8_2BIT(00000111),B8_2BIT(11000000),
  B8_2BIT(00000111),B8_2BIT(11100000),
  B8_2BIT(00000111),B8_2BIT(11100000),
  B8_2BIT(00000111),B8_2BIT(11110000),
  B8_2BIT(00001111),B8_2BIT(11010000),
  B8_2BIT(00001111),B8_2BIT(11110000),
  B8_2BIT(00001111),B8_2BIT(11100000),
  B8_2BIT(00000101),B8_2BIT(01100000),
  B8_2BIT(00001011),B8_2BIT(10110000),
  B8_2BIT(00000011),B8_2BIT(10000000),
  B8_2BIT(00000011),B8_2BIT(11000000),
  B8_2BIT(00000011),B8_2BIT(00000000),
  B8_2BIT(00000010),B8_2BIT(00000000),
  B8_2BIT(00000010),B8_2BIT(00000000),
  B8_2BIT(00000010),B8_2BIT(00000000),

  B8_2BIT(10000111),B8_2BIT(11000001),
  B8_2BIT(00000111),B8_2BIT(11000000),
  B8_2BIT(00000111),B8_2BIT(11100000),
  B8_2BIT(00000111),B8_2BIT(11100000),
  B8_2BIT(00000111),B8_2BIT(11110000),
  B8_2BIT(00001111),B8_2BIT(11010000),
  B8_2BIT(00001111),B8_2BIT(11110000),
  B8_2BIT(00001111),B8_2BIT(11100000),
  B8_2BIT(00000101),B8_2BIT(01100000),
  B8_2BIT(00001011),B8_2BIT(10110000),
  B8_2BIT(00000011),B8_2BIT(10000000),
  B8_2BIT(00000011),B8_2BIT(11000000),
  B8_2BIT(00000011),B8_2BIT(00000000),
  B8_2BIT(00000010),B8_2BIT(00000000),
  B8_2BIT(00000010),B8_2BIT(00000000),
  B8_2BIT(00000010),B8_2BIT(00000000)
};

const struct CRGB FairyColTab[] =  { CRGB::White, CRGB(255,155,59), CRGB(219,43,0)};


const uint8_t TriforceData[] =
{
  B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000001),B8_2BIT(10000000),
  B8_2BIT(00000001),B8_2BIT(10000000),
  B8_2BIT(00000011),B8_2BIT(11000000),
  B8_2BIT(00000011),B8_2BIT(11000000),
  B8_2BIT(00000111),B8_2BIT(11100000),
  B8_2BIT(00000111),B8_2BIT(11100000),
  B8_2BIT(00001111),B8_2BIT(11110000),
  B8_2BIT(00001111),B8_2BIT(11110000),
  B8_2BIT(00011111),B8_2BIT(11111000),
  B8_2BIT(00011111),B8_2BIT(11111000),
  B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),
  
  B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000002),B8_2BIT(20000000),
  B8_2BIT(00000002),B8_2BIT(20000000),
  B8_2BIT(00000022),B8_2BIT(22000000),
  B8_2BIT(00000022),B8_2BIT(22000000),
  B8_2BIT(00000222),B8_2BIT(22200000),
  B8_2BIT(00000222),B8_2BIT(22200000),
  B8_2BIT(00002222),B8_2BIT(22220000),
  B8_2BIT(00002222),B8_2BIT(22220000),
  B8_2BIT(00022222),B8_2BIT(22222000),
  B8_2BIT(00022222),B8_2BIT(22222000),
  B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000)
};

const uint8_t TriforceMask[] = 
{ B8_2BIT(10000000),B8_2BIT(00000001),
  B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000001),B8_2BIT(10000000),
  B8_2BIT(00000001),B8_2BIT(10000000),
  B8_2BIT(00000011),B8_2BIT(11000000),
  B8_2BIT(00000011),B8_2BIT(11000000),
  B8_2BIT(00000111),B8_2BIT(11100000),
  B8_2BIT(00000111),B8_2BIT(11100000),
  B8_2BIT(00001111),B8_2BIT(11110000),
  B8_2BIT(00001111),B8_2BIT(11110000),
  B8_2BIT(00011111),B8_2BIT(11111000),
  B8_2BIT(00011111),B8_2BIT(11111000),
  B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),

  B8_2BIT(10000000),B8_2BIT(00000001),
  B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000001),B8_2BIT(10000000),
  B8_2BIT(00000001),B8_2BIT(10000000),
  B8_2BIT(00000011),B8_2BIT(11000000),
  B8_2BIT(00000011),B8_2BIT(11000000),
  B8_2BIT(00000111),B8_2BIT(11100000),
  B8_2BIT(00000111),B8_2BIT(11100000),
  B8_2BIT(00001111),B8_2BIT(11110000),
  B8_2BIT(00001111),B8_2BIT(11110000),
  B8_2BIT(00011111),B8_2BIT(11111000),
  B8_2BIT(00011111),B8_2BIT(11111000),
  B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000)
};

const struct CRGB TriforceColTab[] =  { CRGB(231,193,124), CRGB(155,142,255)};

const uint8_t RupeeData[] =
{
  B8_2BIT(00000001),B8_2BIT(20000000),
  B8_2BIT(00000011),B8_2BIT(22000000),
  B8_2BIT(00000111),B8_2BIT(22200000),
  B8_2BIT(00001212),B8_2BIT(02020000),
  B8_2BIT(00001122),B8_2BIT(20220000),
  B8_2BIT(00001122),B8_2BIT(20220000),
  B8_2BIT(00001122),B8_2BIT(20220000),
  B8_2BIT(00001122),B8_2BIT(20220000),
  B8_2BIT(00001122),B8_2BIT(20220000),
  B8_2BIT(00001122),B8_2BIT(20220000),
  B8_2BIT(00001122),B8_2BIT(20220000),
  B8_2BIT(00001212),B8_2BIT(20220000),
  B8_2BIT(00002221),B8_2BIT(02020000),
  B8_2BIT(00000222),B8_2BIT(22200000),
  B8_2BIT(00000022),B8_2BIT(22000000),
  B8_2BIT(00000002),B8_2BIT(20000000)

//  B8_2BIT(00013000),
//  B8_2BIT(00113300),
//  B8_2BIT(01113330),
//  B8_2BIT(13130303),
//  B8_2BIT(11333033),
//  B8_2BIT(11333033),
//  B8_2BIT(11333033),
//  B8_2BIT(11333033),
//  B8_2BIT(11333033),
//  B8_2BIT(11333033),
//  B8_2BIT(11333033),
//  B8_2BIT(13133033),
//  B8_2BIT(33310303),
//  B8_2BIT(03333330),
//  B8_2BIT(00333300),
//  B8_2BIT(00033000) 
};

const uint8_t RupeeMask[] = 
{ 
  B8_1BIT(00000001),B8_1BIT(10000000),
  B8_1BIT(00000011),B8_1BIT(11000000),
  B8_1BIT(00000111),B8_1BIT(11100000),
  B8_1BIT(00001111),B8_1BIT(11110000),
  B8_1BIT(00001111),B8_1BIT(11110000),
  B8_1BIT(00001111),B8_1BIT(11110000),
  B8_1BIT(00001111),B8_1BIT(11110000),
  B8_1BIT(00001111),B8_1BIT(11110000),
  B8_1BIT(00001111),B8_1BIT(11110000),
  B8_1BIT(00001111),B8_1BIT(11110000),
  B8_1BIT(00001111),B8_1BIT(11110000),
  B8_1BIT(00001111),B8_1BIT(11110000),
  B8_1BIT(00001111),B8_1BIT(11110000),
  B8_1BIT(00000111),B8_1BIT(11100000),
  B8_1BIT(00000011),B8_1BIT(11000000),
  B8_1BIT(00000001),B8_1BIT(10000000)

//  B8_1BIT(00011000),
//  B8_1BIT(00111100),
//  B8_1BIT(01111110),
//  B8_1BIT(11111111),
//  B8_1BIT(11111111),
//  B8_1BIT(11111111),
//  B8_1BIT(11111111),
//  B8_1BIT(11111111),
//  B8_1BIT(11111111),
//  B8_1BIT(11111111),
//  B8_1BIT(11111111),
//  B8_1BIT(11111111),
//  B8_1BIT(11111111),
//  B8_1BIT(01111110),
//  B8_1BIT(00111100),
//  B8_1BIT(00011000)
};

//const struct CRGB RupeeColTab[] =  { CRGB::White, CRGB(231,156,33), CRGB(155,142,255)};
const struct CRGB RupeeColTab[] =  { CRGB::White, CRGB(231,156,33)};


const uint8_t ToastData[] =
{
B8_2BIT(01111110),
B8_2BIT(12222221),
B8_2BIT(12022021),
B8_2BIT(01322310),
B8_2BIT(01222210),
B8_2BIT(01222210),
B8_2BIT(01111110)
};

const uint8_t ToastMask[] =
{
B8_2BIT(01111110),
B8_2BIT(11111111),
B8_2BIT(11111111),
B8_2BIT(01111110),
B8_2BIT(01111110),
B8_2BIT(01111110),
B8_2BIT(01111110)
};

const struct CRGB ToastColTab[] =  { CRGB(144,67,13), CRGB(240,232,131), CRGB(253,105,181)};

cSprite SprPacmanRight(MY_SPRITE_WIDTH, MY_SPRITE_HEIGHT, PacmanRightData, PACMAN_FRAMES, _2BIT, PacmanRightColTab, PacmanRightMask);
cSprite SprMarioRight(MARIO_SIZE, MARIO_SIZE, MarioData, MARIO_FRAMES, _2BIT, MarioColTab, MarioMask);
cSprite SprMarioRight2(MARIO_SIZE, MARIO_SIZE, MarioData, MARIO_FRAMES, _2BIT, MarioColTab, MarioMask);
cSprite SprLuigiRight(MARIO_SIZE, MARIO_SIZE, MarioData, MARIO_FRAMES, _2BIT, LuigiColTab, MarioMask);
cSprite SprLuigiRight2(MARIO_SIZE, MARIO_SIZE, MarioData, MARIO_FRAMES, _2BIT, LuigiColTab, MarioMask);
cSprite SprMarioRight3(MARIO_SIZE, MARIO_SIZE, MarioData, MARIO_FRAMES, _2BIT, MarioColTab, MarioMask);
cSprite SprMarioRight4(MARIO_SIZE, MARIO_SIZE, MarioData, MARIO_FRAMES, _2BIT, MarioColTab, MarioMask);
cSprite SprPinky(MY_SPRITE_WIDTH, MY_SPRITE_HEIGHT, PinkyData, PINKY_FRAMES, _2BIT, PinkyColTab, PinkyMask);
cSprite SprBlinky(MY_SPRITE_WIDTH, MY_SPRITE_HEIGHT, PinkyData, PINKY_FRAMES, _2BIT, BlinkyColTab, PinkyMask);
cSprite SprInky(MY_SPRITE_WIDTH, MY_SPRITE_HEIGHT, PinkyData, PINKY_FRAMES, _2BIT, InkyColTab, PinkyMask);
cSprite SprClyde(MY_SPRITE_WIDTH, MY_SPRITE_HEIGHT, PinkyData, PINKY_FRAMES, _2BIT, ClydeColTab, PinkyMask);
cSprite SprPacmanLeft(MY_SPRITE_WIDTH, MY_SPRITE_HEIGHT, PacmanLeftData, PACMAN_FRAMES, _2BIT, PacmanLeftColTab, PacmanLeftMask);
cSprite SprGhost(MY_SPRITE_WIDTH, MY_SPRITE_HEIGHT, GhostData, PINKY_FRAMES, _2BIT, GhostColTab, GhostMask);
cSprite SprMushroom(MARIO_SIZE, MARIO_SIZE, MushroomData, 1, _2BIT, MushroomColTab, MushroomMask);
cSprite SprMushroom2(MARIO_SIZE, MARIO_SIZE, MushroomData, 1, _2BIT, MushroomColTab, MushroomMask);
cSprite SprGoomba(MARIO_SIZE, MARIO_SIZE, GoombaData, 2, _2BIT, GoombaColTab, GoombaMask);
cSprite SprGoomba2(MARIO_SIZE, MARIO_SIZE, GoombaData, 2, _2BIT, GoombaColTab, GoombaMask);
cSprite SprBrow(BROW_WIDTH, BROW_HEIGHT, BrowData, 20, _3BIT, BrowColTab, BrowMask);
cSprite SprCompCube1(15, 15, CompCubeData, 1, _2BIT, CompCubeColTab, CompCubeMask);
cSprite SprCompCube2(15, 15, CompCubeData, 1, _2BIT, CompCubeColTab, CompCubeMask);
cSprite SprCompCube3(15, 15, CompCubeData, 1, _2BIT, CompCubeColTab, CompCubeMask);
cSprite SprCompCube4(15, 15, CompCubeData, 1, _2BIT, CompCubeColTab, CompCubeMask);
cSprite SprMaus(23, 16, MausData, 7, _4BIT, MausColTab, MausMask);
cSprite SprOctorok(MARIO_SIZE, MARIO_SIZE, OctorokData, 2, _2BIT, OctorokColTab, OctorokMask);
cSprite SprOctorok2(MARIO_SIZE, MARIO_SIZE, OctorokData, 2, _2BIT, OctorokColTab, OctorokMask);
cSprite SprLink(MARIO_SIZE, MARIO_SIZE, LinkData, 2, _2BIT, LinkColTab, LinkMask);
cSprite SprLink2(MARIO_SIZE, MARIO_SIZE, LinkData, 2, _2BIT, LinkColTab, LinkMask);
cSprite SprFairy(MARIO_SIZE, MARIO_SIZE, FairyData, 2, _2BIT, FairyColTab, FairyMask);
cSprite SprFairy2(MARIO_SIZE, MARIO_SIZE, FairyData, 2, _2BIT, FairyColTab, FairyMask);
cSprite SprTriforce(MARIO_SIZE, MARIO_SIZE, TriforceData, 2, _2BIT, TriforceColTab, TriforceMask);
cSprite SprTriforce2(MARIO_SIZE, MARIO_SIZE, TriforceData, 2, _2BIT, TriforceColTab, TriforceMask);
cSprite SprRupee(16, 16, RupeeData, 1, _2BIT, RupeeColTab, RupeeMask);
cSprite SprRupee2(16, 16, RupeeData, 1, _2BIT, RupeeColTab, RupeeMask);
cSprite SprToast(8, 7, ToastData, 1, _2BIT, ToastColTab, ToastMask);
cSprite SprToast2(8, 7, ToastData, 1, _2BIT, ToastColTab, ToastMask);
cSprite SprToast3(8, 7, ToastData, 1, _2BIT, ToastColTab, ToastMask);
cSprite SprToast4(8, 7, ToastData, 1, _2BIT, ToastColTab, ToastMask);
cSprite SprToast5(8, 7, ToastData, 1, _2BIT, ToastColTab, ToastMask);
cSprite SprToast6(8, 7, ToastData, 1, _2BIT, ToastColTab, ToastMask);
