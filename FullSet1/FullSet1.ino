/* This is the "full set" for my led tophat created for DragonCon 2016.  
 * Top hat was created using a Teensy 3.2 running FastLED (https://github.com/FastLED) as the main LED library, 
 * I'm running 1024 LED's in a circular format around the ~ 7 inch tall hat.  The matrix is formed
 * from four 16x16 APA102 panels and can be run from a USB power bank, utilizing under 3amp.
 
 Josh Parsons - UAHLunchbox
 */
 
#include <FastLED.h>
#include <Button.h> // https://github.com/JChristensen/Button
// Libraries from https://github.com/AaronLiddiment
#include <LEDMatrix.h>
#include <LEDSprites.h>
#include <LEDText.h>
#include <Font12x16.h>
#include <FontP16x16.h>
#include <FontMatrise.h>

// Set to run on the Teensy 3.2 SPI ports and run on APA102 leds
#define DATA_PIN    11
#define CLK_PIN   13
#define CHIPSET    APA102
#define COLOR_ORDER BGR

// This is set for the LED matrices on the top hat. 
#define MATRIX_WIDTH   64
#define MATRIX_HEIGHT  -16
#define MATRIX_TYPE    VERTICAL_ZIGZAG_MATRIX
#define WIDTH   64
#define HEIGHT  16
// Sets params for the Fire function
#define SPARKING 200
#define COOLING  200
#define HOT 300
#define MAXHOT HOT*HEIGHT
#define MAX_DIMENSION ((WIDTH>HEIGHT) ? WIDTH : HEIGHT)
//Define the matrix.
cLEDMatrix<MATRIX_WIDTH, MATRIX_HEIGHT, MATRIX_TYPE> leds;

cLEDSprites Sprites(&leds);
CRGBPalette16 gPal;

#define MY_SPRITE_WIDTH  11
#define MY_SPRITE_HEIGHT 10
#define PACMAN_FRAMES  3
#define PINKY_FRAMES  2
#define MARIO_FRAMES  3
#define MARIO_SIZE 16
#define BROW_HEIGHT 14
#define BROW_WIDTH 24
#define POWER_PILL_SIZE	4

#define ARRAY_SIZE(A) (sizeof(A) / sizeof((A)[0]))

#define PIN1 5
#define PIN2 6
#define PIN3 7
#define PIN4 8

Button btnA(PIN1);
Button btnB(PIN2);
Button btnC(PIN3);
Button btnD(PIN4);

cLEDText ScrollingMsg;

const unsigned char TxtDemo[] = { EFFECT_FRAME_RATE "\x02"
                                  EFFECT_HSV_AV "\x00\xff\xff\x40\xff\xff"
                                  EFFECT_SCROLL_LEFT "        DRAGON*CON" 
                                  EFFECT_HSV_AV "\x00\xff\xff\x40\xff\xff"
                                  EFFECT_SCROLL_LEFT " DRAGON*CON"
                                  EFFECT_HSV_AV "\x00\xff\xff\x40\xff\xff"
                                  EFFECT_SCROLL_LEFT " DRAGON*CON"
                                  EFFECT_HSV_AV "\x00\xff\xff\x40\xff\xff"
                                  EFFECT_SCROLL_LEFT " DRAGON*CON"
                                  EFFECT_HSV_AV "\x00\xff\xff\x40\xff\xff"
                                  EFFECT_SCROLL_LEFT " DRAGON*CON"
                                  EFFECT_HSV_AV "\x00\xff\xff\x40\xff\xff"
                                  EFFECT_SCROLL_LEFT " DRAGON*CON"
                                  EFFECT_HSV_AV "\x00\xff\xff\x40\xff\xff"
                                  EFFECT_SCROLL_LEFT " DRAGON*CON"
                                  EFFECT_HSV_AV "\x00\xff\xff\x40\xff\xff"
                                  EFFECT_SCROLL_LEFT " DRAGON*CON"
                                  EFFECT_HSV_AV "\x00\xff\xff\x40\xff\xff"
                                  EFFECT_SCROLL_LEFT " DRAGON*CON"
                                  EFFECT_HSV_AV "\x00\xff\xff\x40\xff\xff"
                                  EFFECT_SCROLL_LEFT " DRAGON*CON"
                                  EFFECT_HSV_AV "\x00\xff\xff\x40\xff\xff"
                                  EFFECT_SCROLL_LEFT " DRAGON*CON"
                                  EFFECT_HSV_AV "\x00\xff\xff\x40\xff\xff"
                                  EFFECT_SCROLL_LEFT " DRAGON*CON"
                                  EFFECT_HSV_AV "\x00\xff\xff\x40\xff\xff"
                                  EFFECT_SCROLL_LEFT " DRAGON*CON"
                                  EFFECT_HSV_AV "\x00\xff\xff\x40\xff\xff"
                                  EFFECT_SCROLL_LEFT " DRAGON*CON"
                                  EFFECT_HSV_AV "\x00\xff\xff\x40\xff\xff"
                                  EFFECT_SCROLL_LEFT " DRAGON*CON"
                                  EFFECT_HSV_AV "\x00\xff\xff\x40\xff\xff"
                                  EFFECT_SCROLL_LEFT " DRAGON*CON"
                                  EFFECT_HSV_AV "\x00\xff\xff\x40\xff\xff"
                                  EFFECT_SCROLL_LEFT " DRAGON*CON"
                                  EFFECT_HSV_AV "\x00\xff\xff\x40\xff\xff"
                                  EFFECT_SCROLL_LEFT " DRAGON*CON"
                                  };
uint16_t Options;
uint8_t angle = 0;
int randcount, randbrow, countup, countdown;
int count, eye_count, mcount, cube_count, mauscount = 0;
uint8_t hue = 0;
uint8_t gHue = 0;
int16_t counter = 0;

uint16_t PlasmaTime, PlasmaShift;

bool gReverseDirection = false;

static uint16_t f;
static uint16_t g;
static uint16_t h;
uint16_t scale = 20;
uint16_t speed = 2;
uint8_t noise[MAX_DIMENSION][MAX_DIMENSION];

const uint8_t MarioData[] =
{
  B8_2BIT(00000111),B8_2BIT(11100000),
  B8_2BIT(00001111),B8_2BIT(11111100),
  B8_2BIT(00002222),B8_2BIT(33230000),
  B8_2BIT(00022323),B8_2BIT(33233300),
  B8_2BIT(00022322),B8_2BIT(33323330),
  B8_2BIT(00022233),B8_2BIT(33222200),
  B8_2BIT(00000333),B8_2BIT(33333000),
  B8_2BIT(00222221),B8_2BIT(12200000),
  B8_2BIT(33322221),B8_2BIT(11222333),
  B8_2BIT(33332221),B8_2BIT(31112233),
  B8_2BIT(33301111),B8_2BIT(11110220),
  B8_2BIT(00011111),B8_2BIT(11111220),
  B8_2BIT(00111111),B8_2BIT(11111220),
  B8_2BIT(02221110),B8_2BIT(01111220),
  B8_2BIT(02222000),B8_2BIT(00000000),
  B8_2BIT(00222200),B8_2BIT(00000000),

  B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000111),B8_2BIT(11100000),
  B8_2BIT(00001111),B8_2BIT(11111100),
  B8_2BIT(00002222),B8_2BIT(33230000),
  B8_2BIT(00022323),B8_2BIT(33233300),
  B8_2BIT(00022322),B8_2BIT(33323330),
  B8_2BIT(00022233),B8_2BIT(33222200),
  B8_2BIT(00000333),B8_2BIT(33333000),
  B8_2BIT(00002222),B8_2BIT(21233000),
  B8_2BIT(00033222),B8_2BIT(22233300),
  B8_2BIT(00333122),B8_2BIT(22233000),
  B8_2BIT(00222111),B8_2BIT(11110000),
  B8_2BIT(00221111),B8_2BIT(11110000),
  B8_2BIT(02221111),B8_2BIT(11100000),
  B8_2BIT(02200022),B8_2BIT(22000000),
  B8_2BIT(00000022),B8_2BIT(22200000),
 
  B8_2BIT(00000111),B8_2BIT(11100000),
  B8_2BIT(00001111),B8_2BIT(11111100),
  B8_2BIT(00002222),B8_2BIT(33230000),
  B8_2BIT(00022323),B8_2BIT(33233300),
  B8_2BIT(00022322),B8_2BIT(33323330),
  B8_2BIT(00022233),B8_2BIT(33222200),
  B8_2BIT(00000333),B8_2BIT(33333000),
  B8_2BIT(00022221),B8_2BIT(22200000),
  B8_2BIT(00222222),B8_2BIT(11220000),
  B8_2BIT(00222221),B8_2BIT(13113000),
  B8_2BIT(00222222),B8_2BIT(11111000),
  B8_2BIT(00112233),B8_2BIT(31111000),
  B8_2BIT(00011223),B8_2BIT(11110000),
  B8_2BIT(00001111),B8_2BIT(22220000),
  B8_2BIT(00002222),B8_2BIT(22222000),
  B8_2BIT(00002222),B8_2BIT(22000000)
};

const uint8_t MarioMask[] = 
{
  B8_2BIT(00000111),B8_2BIT(11100000),
  B8_2BIT(00001111),B8_2BIT(11111100),
  B8_2BIT(00001111),B8_2BIT(11110000),
  B8_2BIT(00011111),B8_2BIT(11111100),
  B8_2BIT(00011111),B8_2BIT(11111110),
  B8_2BIT(00011111),B8_2BIT(11111100),
  B8_2BIT(00000111),B8_2BIT(11111000),
  B8_2BIT(00111111),B8_2BIT(11100000),
  B8_2BIT(11111111),B8_2BIT(11111111),
  B8_2BIT(11111111),B8_2BIT(11111111),
  B8_2BIT(11101111),B8_2BIT(11110110),
  B8_2BIT(00011111),B8_2BIT(11111110),
  B8_2BIT(00111111),B8_2BIT(11111110),
  B8_2BIT(01111110),B8_2BIT(01111110),
  B8_2BIT(01111000),B8_2BIT(00000000),
  B8_2BIT(00111100),B8_2BIT(00000000),

  B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000111),B8_2BIT(11100000),
  B8_2BIT(00001111),B8_2BIT(11111100),
  B8_2BIT(00001111),B8_2BIT(11110000),
  B8_2BIT(00011111),B8_2BIT(11111100),
  B8_2BIT(00011111),B8_2BIT(11111110),
  B8_2BIT(00011111),B8_2BIT(11111100),
  B8_2BIT(00000111),B8_2BIT(11111000),
  B8_2BIT(00001111),B8_2BIT(11111000),
  B8_2BIT(00011111),B8_2BIT(11111100),
  B8_2BIT(00111111),B8_2BIT(11111000),
  B8_2BIT(00111111),B8_2BIT(11110000),
  B8_2BIT(00111111),B8_2BIT(11110000),
  B8_2BIT(01111111),B8_2BIT(11100000),
  B8_2BIT(01100011),B8_2BIT(11000000),
  B8_2BIT(00000011),B8_2BIT(11100000),

  B8_2BIT(00000111),B8_2BIT(11100000),
  B8_2BIT(00001111),B8_2BIT(11111100),
  B8_2BIT(00001111),B8_2BIT(11110000),
  B8_2BIT(00011111),B8_2BIT(11111100),
  B8_2BIT(00011111),B8_2BIT(11111110),
  B8_2BIT(00011111),B8_2BIT(11111100),
  B8_2BIT(00000111),B8_2BIT(11111000),
  B8_2BIT(00011111),B8_2BIT(11100000),
  B8_2BIT(00111111),B8_2BIT(11110000),
  B8_2BIT(00111111),B8_2BIT(11111000),
  B8_2BIT(00111111),B8_2BIT(11111000),
  B8_2BIT(00111111),B8_2BIT(11111000),
  B8_2BIT(00011111),B8_2BIT(11110000),
  B8_2BIT(00001111),B8_2BIT(11110000),
  B8_2BIT(00001111),B8_2BIT(11111000),
  B8_2BIT(00001111),B8_2BIT(11000000)
};

const struct CRGB MarioColTab[] =  {  CRGB::Red, CRGB(152,102,17), CRGB::Gold  };
const struct CRGB LuigiColTab[] =  {  CRGB::White, CRGB::Green, CRGB::Gold  };

const uint8_t MushroomData[] =
{
  B8_2BIT(00001111),B8_2BIT(11110000),
  B8_2BIT(00011223),B8_2BIT(32211000),
  B8_2BIT(00112223),B8_2BIT(32221100),
  B8_2BIT(01132233),B8_2BIT(33223110),
  B8_2BIT(01233333),B8_2BIT(33333210),
  B8_2BIT(11223322),B8_2BIT(22332211),
  B8_2BIT(12223222),B8_2BIT(22232221),
  B8_2BIT(12223222),B8_2BIT(22232221),
  B8_2BIT(12233222),B8_2BIT(22233221),
  B8_2BIT(13333322),B8_2BIT(22333331),
  B8_2BIT(13311111),B8_2BIT(11111331),
  B8_2BIT(11112212),B8_2BIT(21221111),
  B8_2BIT(01122212),B8_2BIT(21222110),
  B8_2BIT(00122222),B8_2BIT(22222100),
  B8_2BIT(00112222),B8_2BIT(22221100),
  B8_2BIT(00011111),B8_2BIT(11111000)
};

const uint8_t MushroomMask[] = 
{
  B8_2BIT(00001111),B8_2BIT(11110000),
  B8_2BIT(00011111),B8_2BIT(1111000),
  B8_2BIT(00111111),B8_2BIT(11111100),
  B8_2BIT(01111111),B8_2BIT(11111110),
  B8_2BIT(01111111),B8_2BIT(11111110),
  B8_2BIT(11111111),B8_2BIT(11111111),
  B8_2BIT(11111111),B8_2BIT(11111111),
  B8_2BIT(11111111),B8_2BIT(11111111),
  B8_2BIT(11111111),B8_2BIT(11111111),
  B8_2BIT(11111111),B8_2BIT(11111111),
  B8_2BIT(11111111),B8_2BIT(11111111),
  B8_2BIT(11111111),B8_2BIT(11111111),
  B8_2BIT(01111111),B8_2BIT(11111110),
  B8_2BIT(00111111),B8_2BIT(11111100),
  B8_2BIT(00111111),B8_2BIT(11111100),
  B8_2BIT(00011111),B8_2BIT(11111000)
};

const struct CRGB MushroomColTab[] =  {  CRGB::Black, CRGB::White, CRGB::Red  };

const uint8_t GoombaData[] =
{
  B8_2BIT(00000011),B8_2BIT(11000000),
  B8_2BIT(00000111),B8_2BIT(11100000),
  B8_2BIT(00001111),B8_2BIT(11110000),
  B8_2BIT(00011111),B8_2BIT(11111000),
  B8_2BIT(00122111),B8_2BIT(11122100),
  B8_2BIT(01113211),B8_2BIT(11231110),
  B8_2BIT(01113222),B8_2BIT(22231110),
  B8_2BIT(11113231),B8_2BIT(13231111),
  B8_2BIT(11113331),B8_2BIT(13331111),
  B8_2BIT(11111111),B8_2BIT(11111111),
  B8_2BIT(01111333),B8_2BIT(33311110),
  B8_2BIT(00003333),B8_2BIT(33330000),
  B8_2BIT(00003333),B8_2BIT(33332200),
  B8_2BIT(00022333),B8_2BIT(32222220),
  B8_2BIT(00022233),B8_2BIT(22222220),
  B8_2BIT(00002220),B8_2BIT(02222200),

  B8_2BIT(00000011),B8_2BIT(11000000),
  B8_2BIT(00000111),B8_2BIT(11100000),
  B8_2BIT(00001111),B8_2BIT(11110000),
  B8_2BIT(00011111),B8_2BIT(11111000),
  B8_2BIT(00122111),B8_2BIT(11122100),
  B8_2BIT(01113211),B8_2BIT(11231110),
  B8_2BIT(01113222),B8_2BIT(22231110),
  B8_2BIT(11113231),B8_2BIT(13231111),
  B8_2BIT(11113331),B8_2BIT(13331111),
  B8_2BIT(11111111),B8_2BIT(11111111),
  B8_2BIT(01111333),B8_2BIT(33311110),
  B8_2BIT(00003333),B8_2BIT(33330000),
  B8_2BIT(00223333),B8_2BIT(33330000),
  B8_2BIT(02222223),B8_2BIT(33322000),
  B8_2BIT(02222222),B8_2BIT(33222000),
  B8_2BIT(00222220),B8_2BIT(02220000)
};

const uint8_t GoombaMask[] =
{
  B8_2BIT(00000011),B8_2BIT(11000000),
  B8_2BIT(00000111),B8_2BIT(11100000),
  B8_2BIT(00001111),B8_2BIT(11110000),
  B8_2BIT(00011111),B8_2BIT(11111000),
  B8_2BIT(00111111),B8_2BIT(11111100),
  B8_2BIT(01111111),B8_2BIT(11111110),
  B8_2BIT(01111111),B8_2BIT(11111110),
  B8_2BIT(11111111),B8_2BIT(11111111),
  B8_2BIT(11111111),B8_2BIT(11111111),
  B8_2BIT(11111111),B8_2BIT(11111111),
  B8_2BIT(01111111),B8_2BIT(11111110),
  B8_2BIT(00001111),B8_2BIT(11110000),
  B8_2BIT(00001111),B8_2BIT(11111100),
  B8_2BIT(00011111),B8_2BIT(11111110),
  B8_2BIT(00011111),B8_2BIT(11111110),
  B8_2BIT(00001110),B8_2BIT(01111100),

  B8_2BIT(00000011),B8_2BIT(11000000),
  B8_2BIT(00000111),B8_2BIT(11100000),
  B8_2BIT(00001111),B8_2BIT(11110000),
  B8_2BIT(00011111),B8_2BIT(11111000),
  B8_2BIT(00111111),B8_2BIT(11111100),
  B8_2BIT(01111111),B8_2BIT(11111110),
  B8_2BIT(01111111),B8_2BIT(11111110),
  B8_2BIT(11111111),B8_2BIT(11111111),
  B8_2BIT(11111111),B8_2BIT(11111111),
  B8_2BIT(11111111),B8_2BIT(11111111),
  B8_2BIT(01111111),B8_2BIT(11111110),
  B8_2BIT(00001111),B8_2BIT(11110000),
  B8_2BIT(00111111),B8_2BIT(11110000),
  B8_2BIT(01111111),B8_2BIT(11111000),
  B8_2BIT(01111111),B8_2BIT(11111000),
  B8_2BIT(00111110),B8_2BIT(01110000)
};

const struct CRGB GoombaColTab[] =  {  CRGB(152,102,17), CRGB::Black, CRGB::White  };

const uint8_t BrowData[] =
{
  B8_3BIT(00111110),B8_3BIT(00000000),B8_3BIT(01111100),
  B8_3BIT(11110111),B8_3BIT(10000001),B8_3BIT(11101111),
  B8_3BIT(00000000),B8_3BIT(11000011),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000222),B8_3BIT(20000002),B8_3BIT(22200000),
  B8_3BIT(00022333),B8_3BIT(32000023),B8_3BIT(33322000),
  B8_3BIT(00233333),B8_3BIT(33200233),B8_3BIT(33333200),
  B8_3BIT(02333344),B8_3BIT(33200233),B8_3BIT(44333320),
  B8_3BIT(03333424),B8_3BIT(33200233),B8_3BIT(42433330),
  B8_3BIT(00333444),B8_3BIT(33000033),B8_3BIT(44433300),
  B8_3BIT(00033333),B8_3BIT(30000003),B8_3BIT(33333000),
  B8_3BIT(00003333),B8_3BIT(00000000),B8_3BIT(33330000),

  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00111110),B8_3BIT(00000000),B8_3BIT(01111100),
  B8_3BIT(11110111),B8_3BIT(10000001),B8_3BIT(11101111),
  B8_3BIT(00000000),B8_3BIT(11000011),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000222),B8_3BIT(20000002),B8_3BIT(22200000),
  B8_3BIT(00022333),B8_3BIT(32000023),B8_3BIT(33322000),
  B8_3BIT(00233333),B8_3BIT(33200233),B8_3BIT(33333200),
  B8_3BIT(02333344),B8_3BIT(33200233),B8_3BIT(44333320),
  B8_3BIT(03333424),B8_3BIT(33200233),B8_3BIT(42433330),
  B8_3BIT(00333444),B8_3BIT(33000033),B8_3BIT(44433300),
  B8_3BIT(00033333),B8_3BIT(30000003),B8_3BIT(33333000),
  B8_3BIT(00003333),B8_3BIT(00000000),B8_3BIT(33330000),

  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00111110),B8_3BIT(00000000),B8_3BIT(01111100),
  B8_3BIT(11110111),B8_3BIT(10000001),B8_3BIT(11101111),
  B8_3BIT(00000000),B8_3BIT(11000011),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000222),B8_3BIT(20000002),B8_3BIT(22200000),
  B8_3BIT(00022333),B8_3BIT(32000023),B8_3BIT(33322000),
  B8_3BIT(00233333),B8_3BIT(33200233),B8_3BIT(33333200),
  B8_3BIT(02333344),B8_3BIT(33200233),B8_3BIT(44333320),
  B8_3BIT(03333424),B8_3BIT(33200233),B8_3BIT(42433330),
  B8_3BIT(00333444),B8_3BIT(33000033),B8_3BIT(44433300),
  B8_3BIT(00033333),B8_3BIT(30000003),B8_3BIT(33333000),
  B8_3BIT(00003333),B8_3BIT(00000000),B8_3BIT(33330000),

  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00111110),B8_3BIT(00000000),B8_3BIT(01111100),
  B8_3BIT(11110111),B8_3BIT(10000001),B8_3BIT(11101111),
  B8_3BIT(00000000),B8_3BIT(11000011),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000222),B8_3BIT(20000002),B8_3BIT(22200000),
  B8_3BIT(00022333),B8_3BIT(32000023),B8_3BIT(33322000),
  B8_3BIT(00233333),B8_3BIT(33200233),B8_3BIT(33333200),
  B8_3BIT(02333344),B8_3BIT(33200233),B8_3BIT(44333320),
  B8_3BIT(03333424),B8_3BIT(33200233),B8_3BIT(42433330),
  B8_3BIT(00333444),B8_3BIT(33000033),B8_3BIT(44433300),
  B8_3BIT(00033333),B8_3BIT(30000003),B8_3BIT(33333000),
  B8_3BIT(00003333),B8_3BIT(00000000),B8_3BIT(33330000),

  B8_3BIT(00111110),B8_3BIT(00000000),B8_3BIT(01111100),
  B8_3BIT(11110111),B8_3BIT(10000001),B8_3BIT(11101111),
  B8_3BIT(00000000),B8_3BIT(11000011),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000222),B8_3BIT(20000002),B8_3BIT(22200000),
  B8_3BIT(00022333),B8_3BIT(32000023),B8_3BIT(33322000),
  B8_3BIT(00233333),B8_3BIT(33200233),B8_3BIT(33333200),
  B8_3BIT(02333344),B8_3BIT(33200233),B8_3BIT(44333320),
  B8_3BIT(03333424),B8_3BIT(33200233),B8_3BIT(42433330),
  B8_3BIT(00333444),B8_3BIT(33000033),B8_3BIT(44433300),
  B8_3BIT(00033333),B8_3BIT(30000003),B8_3BIT(33333000),
  B8_3BIT(00003333),B8_3BIT(00000000),B8_3BIT(33330000),

  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00111110),B8_3BIT(00000000),B8_3BIT(01111100),
  B8_3BIT(11110111),B8_3BIT(10000001),B8_3BIT(11101111),
  B8_3BIT(00000000),B8_3BIT(11000011),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000222),B8_3BIT(20000002),B8_3BIT(22200000),
  B8_3BIT(00022333),B8_3BIT(32000023),B8_3BIT(33322000),
  B8_3BIT(00233333),B8_3BIT(33200233),B8_3BIT(33333200),
  B8_3BIT(02333344),B8_3BIT(33200233),B8_3BIT(44333320),
  B8_3BIT(03333424),B8_3BIT(33200233),B8_3BIT(42433330),
  B8_3BIT(00333444),B8_3BIT(33000033),B8_3BIT(44433300),
  B8_3BIT(00033333),B8_3BIT(30000003),B8_3BIT(33333000),
  B8_3BIT(00003333),B8_3BIT(00000000),B8_3BIT(33330000),

  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00111110),B8_3BIT(00000000),B8_3BIT(01111100),
  B8_3BIT(11110111),B8_3BIT(10000001),B8_3BIT(11101111),
  B8_3BIT(00000000),B8_3BIT(11000011),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000222),B8_3BIT(20000002),B8_3BIT(22200000),
  B8_3BIT(00022333),B8_3BIT(32000023),B8_3BIT(33322000),
  B8_3BIT(00233333),B8_3BIT(33200233),B8_3BIT(33333200),
  B8_3BIT(02333344),B8_3BIT(33200233),B8_3BIT(44333320),
  B8_3BIT(03333424),B8_3BIT(33200233),B8_3BIT(42433330),
  B8_3BIT(00333444),B8_3BIT(33000033),B8_3BIT(44433300),
  B8_3BIT(00033333),B8_3BIT(30000003),B8_3BIT(33333000),
  B8_3BIT(00003333),B8_3BIT(00000000),B8_3BIT(33330000),

  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00111110),B8_3BIT(00000000),B8_3BIT(01111100),
  B8_3BIT(11110111),B8_3BIT(10000001),B8_3BIT(11101111),
  B8_3BIT(00000000),B8_3BIT(11000011),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000222),B8_3BIT(20000002),B8_3BIT(22200000),
  B8_3BIT(00022333),B8_3BIT(32000023),B8_3BIT(33322000),
  B8_3BIT(00233333),B8_3BIT(33200233),B8_3BIT(33333200),
  B8_3BIT(02333344),B8_3BIT(33200233),B8_3BIT(44333320),
  B8_3BIT(03333424),B8_3BIT(33200233),B8_3BIT(42433330),
  B8_3BIT(00333444),B8_3BIT(33000033),B8_3BIT(44433300),
  B8_3BIT(00033333),B8_3BIT(30000003),B8_3BIT(33333000),
  B8_3BIT(00003333),B8_3BIT(00000000),B8_3BIT(33330000),

  B8_3BIT(00111110),B8_3BIT(00000000),B8_3BIT(01111100),
  B8_3BIT(11110111),B8_3BIT(10000001),B8_3BIT(11101111),
  B8_3BIT(00000000),B8_3BIT(11000011),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000222),B8_3BIT(20000002),B8_3BIT(22200000),
  B8_3BIT(00022333),B8_3BIT(32000023),B8_3BIT(33322000),
  B8_3BIT(00233333),B8_3BIT(33200233),B8_3BIT(33333200),
  B8_3BIT(02333344),B8_3BIT(33200233),B8_3BIT(44333320),
  B8_3BIT(03333424),B8_3BIT(33200233),B8_3BIT(42433330),
  B8_3BIT(00333444),B8_3BIT(33000033),B8_3BIT(44433300),
  B8_3BIT(00033333),B8_3BIT(30000003),B8_3BIT(33333000),
  B8_3BIT(00003333),B8_3BIT(00000000),B8_3BIT(33330000),

  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00111110),B8_3BIT(00000000),B8_3BIT(01111100),
  B8_3BIT(11110111),B8_3BIT(10000001),B8_3BIT(11101111),
  B8_3BIT(00000000),B8_3BIT(11000011),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000222),B8_3BIT(20000002),B8_3BIT(22200000),
  B8_3BIT(00022333),B8_3BIT(32000023),B8_3BIT(33322000),
  B8_3BIT(00233333),B8_3BIT(33200233),B8_3BIT(33333200),
  B8_3BIT(02333344),B8_3BIT(33200233),B8_3BIT(44333320),
  B8_3BIT(03333424),B8_3BIT(33200233),B8_3BIT(42433330),
  B8_3BIT(00333444),B8_3BIT(33000033),B8_3BIT(44433300),
  B8_3BIT(00033333),B8_3BIT(30000003),B8_3BIT(33333000),
  B8_3BIT(00003333),B8_3BIT(00000000),B8_3BIT(33330000),

  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00111110),B8_3BIT(00000000),B8_3BIT(01111100),
  B8_3BIT(11110111),B8_3BIT(10000001),B8_3BIT(11101111),
  B8_3BIT(00000000),B8_3BIT(11000011),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000222),B8_3BIT(20000002),B8_3BIT(22200000),
  B8_3BIT(00022333),B8_3BIT(32000023),B8_3BIT(33322000),
  B8_3BIT(00233333),B8_3BIT(33200233),B8_3BIT(33333200),
  B8_3BIT(02333344),B8_3BIT(33200233),B8_3BIT(44333320),
  B8_3BIT(03333424),B8_3BIT(33200233),B8_3BIT(42433330),
  B8_3BIT(00333444),B8_3BIT(33000033),B8_3BIT(44433300),
  B8_3BIT(00033333),B8_3BIT(30000003),B8_3BIT(33333000),
  B8_3BIT(00003333),B8_3BIT(00000000),B8_3BIT(33330000),

  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00111110),B8_3BIT(00000000),B8_3BIT(01111100),
  B8_3BIT(11110111),B8_3BIT(10000001),B8_3BIT(11101111),
  B8_3BIT(00000000),B8_3BIT(11000011),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000222),B8_3BIT(20000002),B8_3BIT(22200000),
  B8_3BIT(00022333),B8_3BIT(32000023),B8_3BIT(33322000),
  B8_3BIT(00233333),B8_3BIT(33200233),B8_3BIT(33333200),
  B8_3BIT(02333344),B8_3BIT(33200233),B8_3BIT(44333320),
  B8_3BIT(03333424),B8_3BIT(33200233),B8_3BIT(42433330),
  B8_3BIT(00333444),B8_3BIT(33000033),B8_3BIT(44433300),
  B8_3BIT(00033333),B8_3BIT(30000003),B8_3BIT(33333000),
  B8_3BIT(00003333),B8_3BIT(00000000),B8_3BIT(33330000),

  B8_3BIT(00111110),B8_3BIT(00000000),B8_3BIT(01111100),
  B8_3BIT(11110111),B8_3BIT(10000001),B8_3BIT(11101111),
  B8_3BIT(00000000),B8_3BIT(11000011),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000222),B8_3BIT(20000002),B8_3BIT(22200000),
  B8_3BIT(00022333),B8_3BIT(32000023),B8_3BIT(33322000),
  B8_3BIT(00233333),B8_3BIT(33200233),B8_3BIT(33333200),
  B8_3BIT(02333344),B8_3BIT(33200233),B8_3BIT(44333320),
  B8_3BIT(03333424),B8_3BIT(33200233),B8_3BIT(42433330),
  B8_3BIT(00333444),B8_3BIT(33000033),B8_3BIT(44433300),
  B8_3BIT(00033333),B8_3BIT(30000003),B8_3BIT(33333000),
  B8_3BIT(00003333),B8_3BIT(00000000),B8_3BIT(33330000),

  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00111110),B8_3BIT(00000000),B8_3BIT(01111100),
  B8_3BIT(11110111),B8_3BIT(10000001),B8_3BIT(11101111),
  B8_3BIT(00000000),B8_3BIT(11000011),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000222),B8_3BIT(20000002),B8_3BIT(22200000),
  B8_3BIT(00022333),B8_3BIT(32000023),B8_3BIT(33322000),
  B8_3BIT(00233333),B8_3BIT(33200233),B8_3BIT(33333200),
  B8_3BIT(02333344),B8_3BIT(33200233),B8_3BIT(44333320),
  B8_3BIT(03333424),B8_3BIT(33200233),B8_3BIT(42433330),
  B8_3BIT(00333444),B8_3BIT(33000033),B8_3BIT(44433300),
  B8_3BIT(00033333),B8_3BIT(30000003),B8_3BIT(33333000),
  B8_3BIT(00003333),B8_3BIT(00000000),B8_3BIT(33330000),

  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00111110),B8_3BIT(00000000),B8_3BIT(01111100),
  B8_3BIT(11110111),B8_3BIT(10000001),B8_3BIT(11101111),
  B8_3BIT(00000000),B8_3BIT(11000011),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000222),B8_3BIT(20000002),B8_3BIT(22200000),
  B8_3BIT(00022333),B8_3BIT(32000023),B8_3BIT(33322000),
  B8_3BIT(00233333),B8_3BIT(33200233),B8_3BIT(33333200),
  B8_3BIT(02333344),B8_3BIT(33200233),B8_3BIT(44333320),
  B8_3BIT(03333424),B8_3BIT(33200233),B8_3BIT(42433330),
  B8_3BIT(00333444),B8_3BIT(33000033),B8_3BIT(44433300),
  B8_3BIT(00033333),B8_3BIT(30000003),B8_3BIT(33333000),
  B8_3BIT(00003333),B8_3BIT(00000000),B8_3BIT(33330000),

  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00111110),B8_3BIT(00000000),B8_3BIT(01111100),
  B8_3BIT(11110111),B8_3BIT(10000001),B8_3BIT(11101111),
  B8_3BIT(00000000),B8_3BIT(11000011),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000222),B8_3BIT(20000002),B8_3BIT(22200000),
  B8_3BIT(00022333),B8_3BIT(32000023),B8_3BIT(33322000),
  B8_3BIT(00233333),B8_3BIT(33200233),B8_3BIT(33333200),
  B8_3BIT(02333344),B8_3BIT(33200233),B8_3BIT(44333320),
  B8_3BIT(03333424),B8_3BIT(33200233),B8_3BIT(42433330),
  B8_3BIT(00333444),B8_3BIT(33000033),B8_3BIT(44433300),
  B8_3BIT(00033333),B8_3BIT(30000003),B8_3BIT(33333000),
  B8_3BIT(00003333),B8_3BIT(00000000),B8_3BIT(33330000),

  B8_3BIT(00111110),B8_3BIT(00000000),B8_3BIT(01111100),
  B8_3BIT(11110111),B8_3BIT(10000001),B8_3BIT(11101111),
  B8_3BIT(00000000),B8_3BIT(11000011),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000222),B8_3BIT(20000002),B8_3BIT(22200000),
  B8_3BIT(00022333),B8_3BIT(32000023),B8_3BIT(33322000),
  B8_3BIT(00233333),B8_3BIT(33200233),B8_3BIT(33333200),
  B8_3BIT(02333344),B8_3BIT(33200233),B8_3BIT(44333320),
  B8_3BIT(03333424),B8_3BIT(33200233),B8_3BIT(42433330),
  B8_3BIT(00333444),B8_3BIT(33000033),B8_3BIT(44433300),
  B8_3BIT(00033333),B8_3BIT(30000003),B8_3BIT(33333000),
  B8_3BIT(00003333),B8_3BIT(00000000),B8_3BIT(33330000),
  
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00111110),B8_3BIT(00000000),B8_3BIT(01111100),
  B8_3BIT(11110111),B8_3BIT(10000001),B8_3BIT(11101111),
  B8_3BIT(00000000),B8_3BIT(11000011),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000222),B8_3BIT(20000002),B8_3BIT(22200000),
  B8_3BIT(00022333),B8_3BIT(32000023),B8_3BIT(33322000),
  B8_3BIT(00233333),B8_3BIT(33200233),B8_3BIT(33333200),
  B8_3BIT(02333344),B8_3BIT(33200233),B8_3BIT(44333320),
  B8_3BIT(03333424),B8_3BIT(33200233),B8_3BIT(42433330),
  B8_3BIT(00333444),B8_3BIT(33000033),B8_3BIT(44433300),
  B8_3BIT(00033333),B8_3BIT(30000003),B8_3BIT(33333000),
  B8_3BIT(00003333),B8_3BIT(00000000),B8_3BIT(33330000),

  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00111110),B8_3BIT(00000000),B8_3BIT(01111100),
  B8_3BIT(11110111),B8_3BIT(10000001),B8_3BIT(11101111),
  B8_3BIT(00000000),B8_3BIT(11000011),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000222),B8_3BIT(20000002),B8_3BIT(22200000),
  B8_3BIT(00022333),B8_3BIT(32000023),B8_3BIT(33322000),
  B8_3BIT(00233333),B8_3BIT(33200233),B8_3BIT(33333200),
  B8_3BIT(02333344),B8_3BIT(33200233),B8_3BIT(44333320),
  B8_3BIT(03333424),B8_3BIT(33200233),B8_3BIT(42433330),
  B8_3BIT(00333444),B8_3BIT(33000033),B8_3BIT(44433300),
  B8_3BIT(00033333),B8_3BIT(30000003),B8_3BIT(33333000),
  B8_3BIT(00003333),B8_3BIT(00000000),B8_3BIT(33330000),

  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00111110),B8_3BIT(00000000),B8_3BIT(01111100),
  B8_3BIT(11110111),B8_3BIT(10000001),B8_3BIT(11101111),
  B8_3BIT(00000000),B8_3BIT(11000011),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00222222),B8_3BIT(22200222),B8_3BIT(22222200),
  B8_3BIT(02222222),B8_3BIT(22200222),B8_3BIT(22222220),
  B8_3BIT(00222222),B8_3BIT(22200222),B8_3BIT(22222200),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
};

const uint8_t BrowMask[] =
{
  B8_2BIT(00111110),B8_2BIT(00000000),B8_2BIT(01111100),
  B8_2BIT(11110111),B8_2BIT(10000001),B8_2BIT(11101111),
  B8_2BIT(00000000),B8_2BIT(11000011),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000111),B8_2BIT(10000001),B8_2BIT(11100000),
  B8_2BIT(00011111),B8_2BIT(11000011),B8_2BIT(11111000),
  B8_2BIT(00111111),B8_2BIT(11100111),B8_2BIT(11111100),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(00111111),B8_2BIT(11000011),B8_2BIT(11111100),
  B8_2BIT(00011111),B8_2BIT(10000001),B8_2BIT(11111000),
  B8_2BIT(00001111),B8_2BIT(00000000),B8_2BIT(11110000),

  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00111110),B8_2BIT(00000000),B8_2BIT(01111100),
  B8_2BIT(11110111),B8_2BIT(10000001),B8_2BIT(11101111),
  B8_2BIT(00000000),B8_2BIT(11000011),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000111),B8_2BIT(10000001),B8_2BIT(11100000),
  B8_2BIT(00011111),B8_2BIT(11000011),B8_2BIT(11111000),
  B8_2BIT(00111111),B8_2BIT(11100111),B8_2BIT(11111100),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(00111111),B8_2BIT(11000011),B8_2BIT(11111100),
  B8_2BIT(00011111),B8_2BIT(10000001),B8_2BIT(11111000),
  B8_2BIT(00001111),B8_2BIT(00000000),B8_2BIT(11110000),

  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00111110),B8_2BIT(00000000),B8_2BIT(01111100),
  B8_2BIT(11110111),B8_2BIT(10000001),B8_2BIT(11101111),
  B8_2BIT(00000000),B8_2BIT(11000011),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000111),B8_2BIT(10000001),B8_2BIT(11100000),
  B8_2BIT(00011111),B8_2BIT(11000011),B8_2BIT(11111000),
  B8_2BIT(00111111),B8_2BIT(11100111),B8_2BIT(11111100),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(00111111),B8_2BIT(11000011),B8_2BIT(11111100),
  B8_2BIT(00011111),B8_2BIT(10000001),B8_2BIT(11111000),
  B8_2BIT(00001111),B8_2BIT(00000000),B8_2BIT(11110000),

  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00111110),B8_2BIT(00000000),B8_2BIT(01111100),
  B8_2BIT(11110111),B8_2BIT(10000001),B8_2BIT(11101111),
  B8_2BIT(00000000),B8_2BIT(11000011),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000111),B8_2BIT(10000001),B8_2BIT(11100000),
  B8_2BIT(00011111),B8_2BIT(11000011),B8_2BIT(11111000),
  B8_2BIT(00111111),B8_2BIT(11100111),B8_2BIT(11111100),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(00111111),B8_2BIT(11000011),B8_2BIT(11111100),
  B8_2BIT(00011111),B8_2BIT(10000001),B8_2BIT(11111000),
  B8_2BIT(00001111),B8_2BIT(00000000),B8_2BIT(11110000),

  B8_2BIT(00111110),B8_2BIT(00000000),B8_2BIT(01111100),
  B8_2BIT(11110111),B8_2BIT(10000001),B8_2BIT(11101111),
  B8_2BIT(00000000),B8_2BIT(11000011),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000111),B8_2BIT(10000001),B8_2BIT(11100000),
  B8_2BIT(00011111),B8_2BIT(11000011),B8_2BIT(11111000),
  B8_2BIT(00111111),B8_2BIT(11100111),B8_2BIT(11111100),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(00111111),B8_2BIT(11000011),B8_2BIT(11111100),
  B8_2BIT(00011111),B8_2BIT(10000001),B8_2BIT(11111000),
  B8_2BIT(00001111),B8_2BIT(00000000),B8_2BIT(11110000),

  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00111110),B8_2BIT(00000000),B8_2BIT(01111100),
  B8_2BIT(11110111),B8_2BIT(10000001),B8_2BIT(11101111),
  B8_2BIT(00000000),B8_2BIT(11000011),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000111),B8_2BIT(10000001),B8_2BIT(11100000),
  B8_2BIT(00011111),B8_2BIT(11000011),B8_2BIT(11111000),
  B8_2BIT(00111111),B8_2BIT(11100111),B8_2BIT(11111100),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(00111111),B8_2BIT(11000011),B8_2BIT(11111100),
  B8_2BIT(00011111),B8_2BIT(10000001),B8_2BIT(11111000),
  B8_2BIT(00001111),B8_2BIT(00000000),B8_2BIT(11110000),

  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00111110),B8_2BIT(00000000),B8_2BIT(01111100),
  B8_2BIT(11110111),B8_2BIT(10000001),B8_2BIT(11101111),
  B8_2BIT(00000000),B8_2BIT(11000011),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000111),B8_2BIT(10000001),B8_2BIT(11100000),
  B8_2BIT(00011111),B8_2BIT(11000011),B8_2BIT(11111000),
  B8_2BIT(00111111),B8_2BIT(11100111),B8_2BIT(11111100),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(00111111),B8_2BIT(11000011),B8_2BIT(11111100),
  B8_2BIT(00011111),B8_2BIT(10000001),B8_2BIT(11111000),
  B8_2BIT(00001111),B8_2BIT(00000000),B8_2BIT(11110000),

  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00111110),B8_2BIT(00000000),B8_2BIT(01111100),
  B8_2BIT(11110111),B8_2BIT(10000001),B8_2BIT(11101111),
  B8_2BIT(00000000),B8_2BIT(11000011),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000111),B8_2BIT(10000001),B8_2BIT(11100000),
  B8_2BIT(00011111),B8_2BIT(11000011),B8_2BIT(11111000),
  B8_2BIT(00111111),B8_2BIT(11100111),B8_2BIT(11111100),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(00111111),B8_2BIT(11000011),B8_2BIT(11111100),
  B8_2BIT(00011111),B8_2BIT(10000001),B8_2BIT(11111000),
  B8_2BIT(00001111),B8_2BIT(00000000),B8_2BIT(11110000),

  B8_2BIT(00111110),B8_2BIT(00000000),B8_2BIT(01111100),
  B8_2BIT(11110111),B8_2BIT(10000001),B8_2BIT(11101111),
  B8_2BIT(00000000),B8_2BIT(11000011),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000111),B8_2BIT(10000001),B8_2BIT(11100000),
  B8_2BIT(00011111),B8_2BIT(11000011),B8_2BIT(11111000),
  B8_2BIT(00111111),B8_2BIT(11100111),B8_2BIT(11111100),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(00111111),B8_2BIT(11000011),B8_2BIT(11111100),
  B8_2BIT(00011111),B8_2BIT(10000001),B8_2BIT(11111000),
  B8_2BIT(00001111),B8_2BIT(00000000),B8_2BIT(11110000),

  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00111110),B8_2BIT(00000000),B8_2BIT(01111100),
  B8_2BIT(11110111),B8_2BIT(10000001),B8_2BIT(11101111),
  B8_2BIT(00000000),B8_2BIT(11000011),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000111),B8_2BIT(10000001),B8_2BIT(11100000),
  B8_2BIT(00011111),B8_2BIT(11000011),B8_2BIT(11111000),
  B8_2BIT(00111111),B8_2BIT(11100111),B8_2BIT(11111100),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(00111111),B8_2BIT(11000011),B8_2BIT(11111100),
  B8_2BIT(00011111),B8_2BIT(10000001),B8_2BIT(11111000),
  B8_2BIT(00001111),B8_2BIT(00000000),B8_2BIT(11110000),

  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00111110),B8_2BIT(00000000),B8_2BIT(01111100),
  B8_2BIT(11110111),B8_2BIT(10000001),B8_2BIT(11101111),
  B8_2BIT(00000000),B8_2BIT(11000011),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000111),B8_2BIT(10000001),B8_2BIT(11100000),
  B8_2BIT(00011111),B8_2BIT(11000011),B8_2BIT(11111000),
  B8_2BIT(00111111),B8_2BIT(11100111),B8_2BIT(11111100),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(00111111),B8_2BIT(11000011),B8_2BIT(11111100),
  B8_2BIT(00011111),B8_2BIT(10000001),B8_2BIT(11111000),
  B8_2BIT(00001111),B8_2BIT(00000000),B8_2BIT(11110000),

  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00111110),B8_2BIT(00000000),B8_2BIT(01111100),
  B8_2BIT(11110111),B8_2BIT(10000001),B8_2BIT(11101111),
  B8_2BIT(00000000),B8_2BIT(11000011),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000111),B8_2BIT(10000001),B8_2BIT(11100000),
  B8_2BIT(00011111),B8_2BIT(11000011),B8_2BIT(11111000),
  B8_2BIT(00111111),B8_2BIT(11100111),B8_2BIT(11111100),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(00111111),B8_2BIT(11000011),B8_2BIT(11111100),
  B8_2BIT(00011111),B8_2BIT(10000001),B8_2BIT(11111000),
  B8_2BIT(00001111),B8_2BIT(00000000),B8_2BIT(11110000),

  B8_2BIT(00111110),B8_2BIT(00000000),B8_2BIT(01111100),
  B8_2BIT(11110111),B8_2BIT(10000001),B8_2BIT(11101111),
  B8_2BIT(00000000),B8_2BIT(11000011),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000111),B8_2BIT(10000001),B8_2BIT(11100000),
  B8_2BIT(00011111),B8_2BIT(11000011),B8_2BIT(11111000),
  B8_2BIT(00111111),B8_2BIT(11100111),B8_2BIT(11111100),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(00111111),B8_2BIT(11000011),B8_2BIT(11111100),
  B8_2BIT(00011111),B8_2BIT(10000001),B8_2BIT(11111000),
  B8_2BIT(00001111),B8_2BIT(00000000),B8_2BIT(11110000),

  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00111110),B8_2BIT(00000000),B8_2BIT(01111100),
  B8_2BIT(11110111),B8_2BIT(10000001),B8_2BIT(11101111),
  B8_2BIT(00000000),B8_2BIT(11000011),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000111),B8_2BIT(10000001),B8_2BIT(11100000),
  B8_2BIT(00011111),B8_2BIT(11000011),B8_2BIT(11111000),
  B8_2BIT(00111111),B8_2BIT(11100111),B8_2BIT(11111100),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(00111111),B8_2BIT(11000011),B8_2BIT(11111100),
  B8_2BIT(00011111),B8_2BIT(10000001),B8_2BIT(11111000),
  B8_2BIT(00001111),B8_2BIT(00000000),B8_2BIT(11110000),

  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00111110),B8_2BIT(00000000),B8_2BIT(01111100),
  B8_2BIT(11110111),B8_2BIT(10000001),B8_2BIT(11101111),
  B8_2BIT(00000000),B8_2BIT(11000011),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000111),B8_2BIT(10000001),B8_2BIT(11100000),
  B8_2BIT(00011111),B8_2BIT(11000011),B8_2BIT(11111000),
  B8_2BIT(00111111),B8_2BIT(11100111),B8_2BIT(11111100),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(00111111),B8_2BIT(11000011),B8_2BIT(11111100),
  B8_2BIT(00011111),B8_2BIT(10000001),B8_2BIT(11111000),
  B8_2BIT(00001111),B8_2BIT(00000000),B8_2BIT(11110000),

  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00111110),B8_2BIT(00000000),B8_2BIT(01111100),
  B8_2BIT(11110111),B8_2BIT(10000001),B8_2BIT(11101111),
  B8_2BIT(00000000),B8_2BIT(11000011),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000111),B8_2BIT(10000001),B8_2BIT(11100000),
  B8_2BIT(00011111),B8_2BIT(11000011),B8_2BIT(11111000),
  B8_2BIT(00111111),B8_2BIT(11100111),B8_2BIT(11111100),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(00111111),B8_2BIT(11000011),B8_2BIT(11111100),
  B8_2BIT(00011111),B8_2BIT(10000001),B8_2BIT(11111000),
  B8_2BIT(00001111),B8_2BIT(00000000),B8_2BIT(11110000),

  B8_2BIT(00111110),B8_2BIT(00000000),B8_2BIT(01111100),
  B8_2BIT(11110111),B8_2BIT(10000001),B8_2BIT(11101111),
  B8_2BIT(00000000),B8_2BIT(11000011),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000111),B8_2BIT(10000001),B8_2BIT(11100000),
  B8_2BIT(00011111),B8_2BIT(11000011),B8_2BIT(11111000),
  B8_2BIT(00111111),B8_2BIT(11100111),B8_2BIT(11111100),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(00111111),B8_2BIT(11000011),B8_2BIT(11111100),
  B8_2BIT(00011111),B8_2BIT(10000001),B8_2BIT(11111000),
  B8_2BIT(00001111),B8_2BIT(00000000),B8_2BIT(11110000),

  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00111110),B8_2BIT(00000000),B8_2BIT(01111100),
  B8_2BIT(11110111),B8_2BIT(10000001),B8_2BIT(11101111),
  B8_2BIT(00000000),B8_2BIT(11000011),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000111),B8_2BIT(10000001),B8_2BIT(11100000),
  B8_2BIT(00011111),B8_2BIT(11000011),B8_2BIT(11111000),
  B8_2BIT(00111111),B8_2BIT(11100111),B8_2BIT(11111100),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(00111111),B8_2BIT(11000011),B8_2BIT(11111100),
  B8_2BIT(00011111),B8_2BIT(10000001),B8_2BIT(11111000),
  B8_2BIT(00001111),B8_2BIT(00000000),B8_2BIT(11110000),

  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00111110),B8_2BIT(00000000),B8_2BIT(01111100),
  B8_2BIT(11110111),B8_2BIT(10000001),B8_2BIT(11101111),
  B8_2BIT(00000000),B8_2BIT(11000011),B8_2BIT(00000000),
  B8_2BIT(00000000),B8_2BIT(00000000),B8_2BIT(00000000),
  B8_2BIT(00000111),B8_2BIT(10000001),B8_2BIT(11100000),
  B8_2BIT(00011111),B8_2BIT(11000011),B8_2BIT(11111000),
  B8_2BIT(00111111),B8_2BIT(11100111),B8_2BIT(11111100),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(01111111),B8_2BIT(11100111),B8_2BIT(11111110),
  B8_2BIT(00111111),B8_2BIT(11000011),B8_2BIT(11111100),
  B8_2BIT(00011111),B8_2BIT(10000001),B8_2BIT(11111000),
  B8_2BIT(00001111),B8_2BIT(00000000),B8_2BIT(11110000),

  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00111110),B8_3BIT(00000000),B8_3BIT(01111100),
  B8_3BIT(11110111),B8_3BIT(10000001),B8_3BIT(11101111),
  B8_3BIT(00000000),B8_3BIT(11000011),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00111111),B8_3BIT(11100111),B8_3BIT(11111100),
  B8_3BIT(01111111),B8_3BIT(11100111),B8_3BIT(11111110),
  B8_3BIT(00111111),B8_3BIT(11100111),B8_3BIT(11111100),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
};

const struct CRGB BrowColTab[] =  {  CRGB(152,102,17), CRGB::Black, CRGB::White, CRGB::DarkGreen }; 

const uint8_t CompCubeData[] =
{
  B8_2BIT(01111011),B8_2BIT(10111100),
  B8_2BIT(11111211),B8_2BIT(12111110),
  B8_2BIT(11111223),B8_2BIT(22111110),
  B8_2BIT(11112223),B8_2BIT(22211110),
  B8_2BIT(11122211),B8_2BIT(12221110),
  B8_2BIT(02222111),B8_2BIT(11222200),
  B8_2BIT(11221131),B8_2BIT(31122110),
  B8_2BIT(11331333),B8_2BIT(33133110),
  B8_2BIT(11221133),B8_2BIT(31122110),
  B8_2BIT(02222113),B8_2BIT(11222200),
  B8_2BIT(11122211),B8_2BIT(12221110),
  B8_2BIT(11112223),B8_2BIT(22211110),
  B8_2BIT(11112223),B8_2BIT(22211110),
  B8_2BIT(11111211),B8_2BIT(12111110),
  B8_2BIT(01111011),B8_2BIT(10111100)
};

const uint8_t CompCubeMask[] =
{
  B8_2BIT(01111011),B8_2BIT(10111100),
  B8_2BIT(11111111),B8_2BIT(11111110),
  B8_2BIT(11111111),B8_2BIT(11111110),
  B8_2BIT(11111111),B8_2BIT(11111110),
  B8_2BIT(11111111),B8_2BIT(11111110),
  B8_2BIT(01111111),B8_2BIT(11111100),
  B8_2BIT(11111111),B8_2BIT(11111110),
  B8_2BIT(11111111),B8_2BIT(11111110),
  B8_2BIT(11111111),B8_2BIT(11111110),
  B8_2BIT(01111111),B8_2BIT(11111100),
  B8_2BIT(11111111),B8_2BIT(11111110),
  B8_2BIT(11111111),B8_2BIT(11111111),
  B8_2BIT(11111111),B8_2BIT(11111110),
  B8_2BIT(11111111),B8_2BIT(11111110),
  B8_2BIT(01111011),B8_2BIT(10111100)
};

const struct CRGB CompCubeColTab[] =  {  CRGB::White, CHSV(128,128,120), CRGB::Purple  };

const uint8_t MausData[] =
{
   B8_4BIT(00011110),B8_4BIT(00000000),B8_4BIT(11110000),
   B8_4BIT(00111111),B8_4BIT(00000001),B8_4BIT(11111000),
   B8_4BIT(01111111),B8_4BIT(10000011),B8_4BIT(11111100),
   B8_4BIT(11111111),B8_4BIT(11000111),B8_4BIT(11111110),
   B8_4BIT(11111111),B8_4BIT(11000111),B8_4BIT(11111110),
   B8_4BIT(11111111),B8_4BIT(11111111),B8_4BIT(11111110),
   B8_4BIT(11111111),B8_4BIT(22111221),B8_4BIT(11111110),
   B8_4BIT(01111112),B8_4BIT(22111222),B8_4BIT(11111100),
   B8_4BIT(00111112),B8_4BIT(21111122),B8_4BIT(11111000),
   B8_4BIT(00011111),B8_4BIT(11111111),B8_4BIT(11110000),
   B8_4BIT(00000012),B8_4BIT(22222222),B8_4BIT(10000000),
   B8_4BIT(00000012),B8_4BIT(22222222),B8_4BIT(10000000),
   B8_4BIT(00000012),B8_4BIT(22222222),B8_4BIT(10000000),
   B8_4BIT(00000011),B8_4BIT(22222221),B8_4BIT(10000000),
   B8_4BIT(00000001),B8_4BIT(12222211),B8_4BIT(00000000),
   B8_4BIT(00000000),B8_4BIT(11111110),B8_4BIT(00000000),

   B8_4BIT(00033330),B8_4BIT(00000000),B8_4BIT(33330000),
   B8_4BIT(00333333),B8_4BIT(00000003),B8_4BIT(33333000),
   B8_4BIT(03333333),B8_4BIT(30000033),B8_4BIT(33333300),
   B8_4BIT(33333333),B8_4BIT(33000333),B8_4BIT(33333330),
   B8_4BIT(33333333),B8_4BIT(33000333),B8_4BIT(33333330),
   B8_4BIT(33333333),B8_4BIT(33333333),B8_4BIT(33333330),
   B8_4BIT(33333333),B8_4BIT(22333223),B8_4BIT(33333330),
   B8_4BIT(03333332),B8_4BIT(22333222),B8_4BIT(33333300),
   B8_4BIT(00333332),B8_4BIT(23333322),B8_4BIT(33333000),
   B8_4BIT(00033333),B8_4BIT(33333333),B8_4BIT(33330000),
   B8_4BIT(00000032),B8_4BIT(22222222),B8_4BIT(30000000),
   B8_4BIT(00000032),B8_4BIT(22222222),B8_4BIT(30000000),
   B8_4BIT(00000032),B8_4BIT(22222222),B8_4BIT(30000000),
   B8_4BIT(00000033),B8_4BIT(22222223),B8_4BIT(30000000),
   B8_4BIT(00000003),B8_4BIT(32222233),B8_4BIT(00000000),
   B8_4BIT(00000000),B8_4BIT(33333330),B8_4BIT(00000000),

   B8_4BIT(00044440),B8_4BIT(00000000),B8_4BIT(44440000),
   B8_4BIT(00444444),B8_4BIT(00000004),B8_4BIT(44444000),
   B8_4BIT(04444444),B8_4BIT(40000044),B8_4BIT(44444400),
   B8_4BIT(44444444),B8_4BIT(44000444),B8_4BIT(44444440),
   B8_4BIT(44444444),B8_4BIT(44000444),B8_4BIT(44444440),
   B8_4BIT(44444444),B8_4BIT(44444444),B8_4BIT(44444440),
   B8_4BIT(44444444),B8_4BIT(22444224),B8_4BIT(44444440),
   B8_4BIT(04444442),B8_4BIT(22444222),B8_4BIT(44444400),
   B8_4BIT(00444442),B8_4BIT(24444422),B8_4BIT(44444000),
   B8_4BIT(00044444),B8_4BIT(44444444),B8_4BIT(44440000),
   B8_4BIT(00000042),B8_4BIT(22222222),B8_4BIT(40000000),
   B8_4BIT(00000042),B8_4BIT(22222222),B8_4BIT(40000000),
   B8_4BIT(00000042),B8_4BIT(22222222),B8_4BIT(40000000),
   B8_4BIT(00000044),B8_4BIT(22222224),B8_4BIT(40000000),
   B8_4BIT(00000004),B8_4BIT(42222244),B8_4BIT(00000000),
   B8_4BIT(00000000),B8_4BIT(44444440),B8_4BIT(00000000),

   B8_4BIT(00055550),B8_4BIT(00000000),B8_4BIT(55550000),
   B8_4BIT(00555555),B8_4BIT(00000005),B8_4BIT(55555000),
   B8_4BIT(05555555),B8_4BIT(50000055),B8_4BIT(55555500),
   B8_4BIT(55555555),B8_4BIT(55000555),B8_4BIT(55555550),
   B8_4BIT(55555555),B8_4BIT(55000555),B8_4BIT(55555550),
   B8_4BIT(55555555),B8_4BIT(55555555),B8_4BIT(55555550),
   B8_4BIT(55555555),B8_4BIT(22555225),B8_4BIT(55555550),
   B8_4BIT(05555552),B8_4BIT(22555222),B8_4BIT(55555500),
   B8_4BIT(00555552),B8_4BIT(25555522),B8_4BIT(55555000),
   B8_4BIT(00055555),B8_4BIT(55555555),B8_4BIT(55550000),
   B8_4BIT(00000052),B8_4BIT(22222222),B8_4BIT(50000000),
   B8_4BIT(00000052),B8_4BIT(22222222),B8_4BIT(50000000),
   B8_4BIT(00000052),B8_4BIT(22222222),B8_4BIT(50000000),
   B8_4BIT(00000055),B8_4BIT(22222225),B8_4BIT(50000000),
   B8_4BIT(00000005),B8_4BIT(52222255),B8_4BIT(00000000),
   B8_4BIT(00000000),B8_4BIT(55555550),B8_4BIT(00000000),

   B8_4BIT(00066660),B8_4BIT(00000000),B8_4BIT(66660000),
   B8_4BIT(00666666),B8_4BIT(00000006),B8_4BIT(66666000),
   B8_4BIT(06666666),B8_4BIT(60000066),B8_4BIT(66666600),
   B8_4BIT(66666666),B8_4BIT(66000666),B8_4BIT(66666660),
   B8_4BIT(66666666),B8_4BIT(66000666),B8_4BIT(66666660),
   B8_4BIT(66666666),B8_4BIT(66666666),B8_4BIT(66666660),
   B8_4BIT(66666666),B8_4BIT(22666226),B8_4BIT(66666660),
   B8_4BIT(06666662),B8_4BIT(22666222),B8_4BIT(66666600),
   B8_4BIT(00666662),B8_4BIT(26666622),B8_4BIT(66666000),
   B8_4BIT(00066666),B8_4BIT(66666666),B8_4BIT(66660000),
   B8_4BIT(00000062),B8_4BIT(22222222),B8_4BIT(60000000),
   B8_4BIT(00000062),B8_4BIT(22222222),B8_4BIT(60000000),
   B8_4BIT(00000062),B8_4BIT(22222222),B8_4BIT(60000000),
   B8_4BIT(00000066),B8_4BIT(22222226),B8_4BIT(60000000),
   B8_4BIT(00000006),B8_4BIT(62222266),B8_4BIT(00000000),
   B8_4BIT(00000000),B8_4BIT(66666660),B8_4BIT(00000000),

   B8_4BIT(00077770),B8_4BIT(00000000),B8_4BIT(77770000),
   B8_4BIT(00777777),B8_4BIT(00000007),B8_4BIT(77777000),
   B8_4BIT(07777777),B8_4BIT(70000077),B8_4BIT(77777700),
   B8_4BIT(77777777),B8_4BIT(77000777),B8_4BIT(77777770),
   B8_4BIT(77777777),B8_4BIT(77000777),B8_4BIT(77777770),
   B8_4BIT(77777777),B8_4BIT(77777777),B8_4BIT(77777770),
   B8_4BIT(77777777),B8_4BIT(22777227),B8_4BIT(77777770),
   B8_4BIT(07777772),B8_4BIT(22777222),B8_4BIT(77777700),
   B8_4BIT(00777772),B8_4BIT(27777722),B8_4BIT(77777000),
   B8_4BIT(00077777),B8_4BIT(77777777),B8_4BIT(77770000),
   B8_4BIT(00000072),B8_4BIT(22222222),B8_4BIT(70000000),
   B8_4BIT(00000072),B8_4BIT(22222222),B8_4BIT(70000000),
   B8_4BIT(00000072),B8_4BIT(22222222),B8_4BIT(70000000),
   B8_4BIT(00000077),B8_4BIT(22222227),B8_4BIT(70000000),
   B8_4BIT(00000007),B8_4BIT(72222277),B8_4BIT(00000000),
   B8_4BIT(00000000),B8_4BIT(77777770),B8_4BIT(00000000),

   B8_4BIT(00088880),B8_4BIT(00000000),B8_4BIT(88880000),
   B8_4BIT(00888888),B8_4BIT(00000008),B8_4BIT(88888000),
   B8_4BIT(08888888),B8_4BIT(80000088),B8_4BIT(88888800),
   B8_4BIT(88888888),B8_4BIT(88000888),B8_4BIT(88888880),
   B8_4BIT(88888888),B8_4BIT(88000888),B8_4BIT(88888880),
   B8_4BIT(88888888),B8_4BIT(88888888),B8_4BIT(88888880),
   B8_4BIT(88888888),B8_4BIT(22888228),B8_4BIT(88888880),
   B8_4BIT(08888882),B8_4BIT(22888222),B8_4BIT(88888800),
   B8_4BIT(00888882),B8_4BIT(28888822),B8_4BIT(88888000),
   B8_4BIT(00088888),B8_4BIT(88888888),B8_4BIT(88880000),
   B8_4BIT(00000082),B8_4BIT(22222222),B8_4BIT(80000000),
   B8_4BIT(00000082),B8_4BIT(22222222),B8_4BIT(80000000),
   B8_4BIT(00000082),B8_4BIT(22222222),B8_4BIT(80000000),
   B8_4BIT(00000088),B8_4BIT(22222228),B8_4BIT(80000000),
   B8_4BIT(00000008),B8_4BIT(82222288),B8_4BIT(00000000),
   B8_4BIT(00000000),B8_4BIT(88888880),B8_4BIT(00000000)
                                                     
};

const uint8_t MausMask[] =
{
   B8_2BIT(00011110),B8_2BIT(00000000),B8_2BIT(11110000),
   B8_2BIT(00111111),B8_2BIT(00000001),B8_2BIT(11111000),
   B8_2BIT(01111111),B8_2BIT(10000011),B8_2BIT(11111100),
   B8_2BIT(11111111),B8_2BIT(11000111),B8_2BIT(11111110),
   B8_2BIT(11111111),B8_2BIT(11000111),B8_2BIT(11111110),
   B8_2BIT(11111111),B8_2BIT(11111111),B8_2BIT(11111110),
   B8_2BIT(11111111),B8_2BIT(11111111),B8_2BIT(11111110),
   B8_2BIT(01111111),B8_2BIT(11111111),B8_2BIT(11111100),
   B8_2BIT(00111111),B8_2BIT(11111111),B8_2BIT(11111000),
   B8_2BIT(00011111),B8_2BIT(11111111),B8_2BIT(11110000),
   B8_2BIT(00000011),B8_2BIT(11111111),B8_2BIT(10000000),
   B8_2BIT(00000011),B8_2BIT(11111111),B8_2BIT(10000000),
   B8_2BIT(00000011),B8_2BIT(11111111),B8_2BIT(10000000),
   B8_2BIT(00000011),B8_2BIT(11111111),B8_2BIT(10000000),
   B8_2BIT(00000001),B8_2BIT(11111111),B8_2BIT(00000000),
   B8_2BIT(00000000),B8_2BIT(11111110),B8_2BIT(00000000),

   B8_2BIT(00011110),B8_2BIT(00000000),B8_2BIT(11110000),
   B8_2BIT(00111111),B8_2BIT(00000001),B8_2BIT(11111000),
   B8_2BIT(01111111),B8_2BIT(10000011),B8_2BIT(11111100),
   B8_2BIT(11111111),B8_2BIT(11000111),B8_2BIT(11111110),
   B8_2BIT(11111111),B8_2BIT(11000111),B8_2BIT(11111110),
   B8_2BIT(11111111),B8_2BIT(11111111),B8_2BIT(11111110),
   B8_2BIT(11111111),B8_2BIT(11111111),B8_2BIT(11111110),
   B8_2BIT(01111111),B8_2BIT(11111111),B8_2BIT(11111100),
   B8_2BIT(00111111),B8_2BIT(11111111),B8_2BIT(11111000),
   B8_2BIT(00011111),B8_2BIT(11111111),B8_2BIT(11110000),
   B8_2BIT(00000011),B8_2BIT(11111111),B8_2BIT(10000000),
   B8_2BIT(00000011),B8_2BIT(11111111),B8_2BIT(10000000),
   B8_2BIT(00000011),B8_2BIT(11111111),B8_2BIT(10000000),
   B8_2BIT(00000011),B8_2BIT(11111111),B8_2BIT(10000000),
   B8_2BIT(00000001),B8_2BIT(11111111),B8_2BIT(00000000),
   B8_2BIT(00000000),B8_2BIT(11111110),B8_2BIT(00000000),

   B8_2BIT(00011110),B8_2BIT(00000000),B8_2BIT(11110000),
   B8_2BIT(00111111),B8_2BIT(00000001),B8_2BIT(11111000),
   B8_2BIT(01111111),B8_2BIT(10000011),B8_2BIT(11111100),
   B8_2BIT(11111111),B8_2BIT(11000111),B8_2BIT(11111110),
   B8_2BIT(11111111),B8_2BIT(11000111),B8_2BIT(11111110),
   B8_2BIT(11111111),B8_2BIT(11111111),B8_2BIT(11111110),
   B8_2BIT(11111111),B8_2BIT(11111111),B8_2BIT(11111110),
   B8_2BIT(01111111),B8_2BIT(11111111),B8_2BIT(11111100),
   B8_2BIT(00111111),B8_2BIT(11111111),B8_2BIT(11111000),
   B8_2BIT(00011111),B8_2BIT(11111111),B8_2BIT(11110000),
   B8_2BIT(00000011),B8_2BIT(11111111),B8_2BIT(10000000),
   B8_2BIT(00000011),B8_2BIT(11111111),B8_2BIT(10000000),
   B8_2BIT(00000011),B8_2BIT(11111111),B8_2BIT(10000000),
   B8_2BIT(00000011),B8_2BIT(11111111),B8_2BIT(10000000),
   B8_2BIT(00000001),B8_2BIT(11111111),B8_2BIT(00000000),
   B8_2BIT(00000000),B8_2BIT(11111110),B8_2BIT(00000000),

   B8_2BIT(00011110),B8_2BIT(00000000),B8_2BIT(11110000),
   B8_2BIT(00111111),B8_2BIT(00000001),B8_2BIT(11111000),
   B8_2BIT(01111111),B8_2BIT(10000011),B8_2BIT(11111100),
   B8_2BIT(11111111),B8_2BIT(11000111),B8_2BIT(11111110),
   B8_2BIT(11111111),B8_2BIT(11000111),B8_2BIT(11111110),
   B8_2BIT(11111111),B8_2BIT(11111111),B8_2BIT(11111110),
   B8_2BIT(11111111),B8_2BIT(11111111),B8_2BIT(11111110),
   B8_2BIT(01111111),B8_2BIT(11111111),B8_2BIT(11111100),
   B8_2BIT(00111111),B8_2BIT(11111111),B8_2BIT(11111000),
   B8_2BIT(00011111),B8_2BIT(11111111),B8_2BIT(11110000),
   B8_2BIT(00000011),B8_2BIT(11111111),B8_2BIT(10000000),
   B8_2BIT(00000011),B8_2BIT(11111111),B8_2BIT(10000000),
   B8_2BIT(00000011),B8_2BIT(11111111),B8_2BIT(10000000),
   B8_2BIT(00000011),B8_2BIT(11111111),B8_2BIT(10000000),
   B8_2BIT(00000001),B8_2BIT(11111111),B8_2BIT(00000000),
   B8_2BIT(00000000),B8_2BIT(11111110),B8_2BIT(00000000),

   B8_2BIT(00011110),B8_2BIT(00000000),B8_2BIT(11110000),
   B8_2BIT(00111111),B8_2BIT(00000001),B8_2BIT(11111000),
   B8_2BIT(01111111),B8_2BIT(10000011),B8_2BIT(11111100),
   B8_2BIT(11111111),B8_2BIT(11000111),B8_2BIT(11111110),
   B8_2BIT(11111111),B8_2BIT(11000111),B8_2BIT(11111110),
   B8_2BIT(11111111),B8_2BIT(11111111),B8_2BIT(11111110),
   B8_2BIT(11111111),B8_2BIT(11111111),B8_2BIT(11111110),
   B8_2BIT(01111111),B8_2BIT(11111111),B8_2BIT(11111100),
   B8_2BIT(00111111),B8_2BIT(11111111),B8_2BIT(11111000),
   B8_2BIT(00011111),B8_2BIT(11111111),B8_2BIT(11110000),
   B8_2BIT(00000011),B8_2BIT(11111111),B8_2BIT(10000000),
   B8_2BIT(00000011),B8_2BIT(11111111),B8_2BIT(10000000),
   B8_2BIT(00000011),B8_2BIT(11111111),B8_2BIT(10000000),
   B8_2BIT(00000011),B8_2BIT(11111111),B8_2BIT(10000000),
   B8_2BIT(00000001),B8_2BIT(11111111),B8_2BIT(00000000),
   B8_2BIT(00000000),B8_2BIT(11111110),B8_2BIT(00000000),

   B8_2BIT(00011110),B8_2BIT(00000000),B8_2BIT(11110000),
   B8_2BIT(00111111),B8_2BIT(00000001),B8_2BIT(11111000),
   B8_2BIT(01111111),B8_2BIT(10000011),B8_2BIT(11111100),
   B8_2BIT(11111111),B8_2BIT(11000111),B8_2BIT(11111110),
   B8_2BIT(11111111),B8_2BIT(11000111),B8_2BIT(11111110),
   B8_2BIT(11111111),B8_2BIT(11111111),B8_2BIT(11111110),
   B8_2BIT(11111111),B8_2BIT(11111111),B8_2BIT(11111110),
   B8_2BIT(01111111),B8_2BIT(11111111),B8_2BIT(11111100),
   B8_2BIT(00111111),B8_2BIT(11111111),B8_2BIT(11111000),
   B8_2BIT(00011111),B8_2BIT(11111111),B8_2BIT(11110000),
   B8_2BIT(00000011),B8_2BIT(11111111),B8_2BIT(10000000),
   B8_2BIT(00000011),B8_2BIT(11111111),B8_2BIT(10000000),
   B8_2BIT(00000011),B8_2BIT(11111111),B8_2BIT(10000000),
   B8_2BIT(00000011),B8_2BIT(11111111),B8_2BIT(10000000),
   B8_2BIT(00000001),B8_2BIT(11111111),B8_2BIT(00000000),
   B8_2BIT(00000000),B8_2BIT(11111110),B8_2BIT(00000000),

   B8_2BIT(00011110),B8_2BIT(00000000),B8_2BIT(11110000),
   B8_2BIT(00111111),B8_2BIT(00000001),B8_2BIT(11111000),
   B8_2BIT(01111111),B8_2BIT(10000011),B8_2BIT(11111100),
   B8_2BIT(11111111),B8_2BIT(11000111),B8_2BIT(11111110),
   B8_2BIT(11111111),B8_2BIT(11000111),B8_2BIT(11111110),
   B8_2BIT(11111111),B8_2BIT(11111111),B8_2BIT(11111110),
   B8_2BIT(11111111),B8_2BIT(11111111),B8_2BIT(11111110),
   B8_2BIT(01111111),B8_2BIT(11111111),B8_2BIT(11111100),
   B8_2BIT(00111111),B8_2BIT(11111111),B8_2BIT(11111000),
   B8_2BIT(00011111),B8_2BIT(11111111),B8_2BIT(11110000),
   B8_2BIT(00000011),B8_2BIT(11111111),B8_2BIT(10000000),
   B8_2BIT(00000011),B8_2BIT(11111111),B8_2BIT(10000000),
   B8_2BIT(00000011),B8_2BIT(11111111),B8_2BIT(10000000),
   B8_2BIT(00000011),B8_2BIT(11111111),B8_2BIT(10000000),
   B8_2BIT(00000001),B8_2BIT(11111111),B8_2BIT(00000000),
   B8_2BIT(00000000),B8_2BIT(11111110),B8_2BIT(00000000)
};

const struct CRGB MausColTab[] =  {  CRGB::Yellow, CRGB::White, CRGB::Green, CRGB::Blue, CRGB::Purple, CRGB::Red, CRGB::Orange, CRGB::Pink  };

const uint8_t PowerPillData[] = 
{
  B8_1BIT(01100000),
  B8_1BIT(11110000),
  B8_1BIT(11110000),
  B8_1BIT(01100000)
};
const struct CRGB PowerPillColTab[] =  {  CRGB(48, 48, 255)  };

const uint8_t PacmanRightData[] = 
{
  // Pacman Open
  B8_2BIT(00021112),B8_2BIT(00000000),
  B8_2BIT(00111111),B8_2BIT(10000000),
  B8_2BIT(01111111),B8_2BIT(00000000),
  B8_2BIT(21111110),B8_2BIT(00000000),
  B8_2BIT(11111000),B8_2BIT(00000000),
  B8_2BIT(11111000),B8_2BIT(00000000),
  B8_2BIT(21111110),B8_2BIT(00000000),
  B8_2BIT(01111111),B8_2BIT(00000000),
  B8_2BIT(00111111),B8_2BIT(10000000),
  B8_2BIT(00021112),B8_2BIT(00000000),
  // Pacman Half
  B8_2BIT(00021112),B8_2BIT(00000000),
  B8_2BIT(00111111),B8_2BIT(10000000),
  B8_2BIT(01111111),B8_2BIT(11000000),
  B8_2BIT(21111111),B8_2BIT(11200000),
  B8_2BIT(11111200),B8_2BIT(00000000),
  B8_2BIT(11111200),B8_2BIT(00000000),
  B8_2BIT(21111111),B8_2BIT(11200000),
  B8_2BIT(01111111),B8_2BIT(11000000),
  B8_2BIT(00111111),B8_2BIT(10000000),
  B8_2BIT(00021112),B8_2BIT(00000000),
  // Pacman Closed
  B8_2BIT(00021112),B8_2BIT(00000000),
  B8_2BIT(00111111),B8_2BIT(10000000),
  B8_2BIT(01111111),B8_2BIT(11000000),
  B8_2BIT(21111111),B8_2BIT(11200000),
  B8_2BIT(11111111),B8_2BIT(11100000),
  B8_2BIT(11111111),B8_2BIT(11100000),
  B8_2BIT(21111111),B8_2BIT(11200000),
  B8_2BIT(01111111),B8_2BIT(11000000),
  B8_2BIT(00111111),B8_2BIT(10000000),
  B8_2BIT(00021112),B8_2BIT(00000000)
};
const uint8_t PacmanRightMask[] = 
{
  // Pacman Open
  B8_1BIT(00011111),B8_1BIT(00000000),
  B8_1BIT(00111111),B8_1BIT(10000000),
  B8_1BIT(01111111),B8_1BIT(00000000),
  B8_1BIT(11111110),B8_1BIT(00000000),
  B8_1BIT(11111000),B8_1BIT(00000000),
  B8_1BIT(11111000),B8_1BIT(00000000),
  B8_1BIT(11111110),B8_1BIT(00000000),
  B8_1BIT(01111111),B8_1BIT(00000000),
  B8_1BIT(00111111),B8_1BIT(10000000),
  B8_1BIT(00011111),B8_1BIT(00000000),
  // Pacman Half
  B8_1BIT(00011111),B8_1BIT(00000000),
  B8_1BIT(00111111),B8_1BIT(10000000),
  B8_1BIT(01111111),B8_1BIT(11000000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(11111100),B8_1BIT(00000000),
  B8_1BIT(11111100),B8_1BIT(00000000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(01111111),B8_1BIT(11000000),
  B8_1BIT(00111111),B8_1BIT(10000000),
  B8_1BIT(00011111),B8_1BIT(00000000),
  // Pacman Closed
  B8_1BIT(00011111),B8_1BIT(00000000),
  B8_1BIT(00111111),B8_1BIT(10000000),
  B8_1BIT(01111111),B8_1BIT(11000000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(01111111),B8_1BIT(11000000),
  B8_1BIT(00111111),B8_1BIT(10000000),
  B8_1BIT(00011111),B8_1BIT(00000000)
};
const struct CRGB PacmanRightColTab[] =  {  CRGB(255, 255, 0), CRGB(100, 100, 0), CRGB(255, 255, 255)  };

const uint8_t PinkyData[] = 
{
  // Pinky Frame 1
  B8_2BIT(00001110),B8_2BIT(00000000),
  B8_2BIT(00111111),B8_2BIT(10000000),
  B8_2BIT(01111111),B8_2BIT(11000000),
  B8_2BIT(01122212),B8_2BIT(22000000),
  B8_2BIT(11122312),B8_2BIT(23100000),
  B8_2BIT(11122212),B8_2BIT(22100000),
  B8_2BIT(11111111),B8_2BIT(11100000),
  B8_2BIT(11111111),B8_2BIT(11100000),
  B8_2BIT(11111111),B8_2BIT(11100000),
  B8_2BIT(11001110),B8_2BIT(01100000),
  // Pinky Frame 2
  B8_2BIT(00001110),B8_2BIT(00000000),
  B8_2BIT(00111111),B8_2BIT(10000000),
  B8_2BIT(01111111),B8_2BIT(11000000),
  B8_2BIT(01122212),B8_2BIT(22000000),
  B8_2BIT(11122312),B8_2BIT(23100000),
  B8_2BIT(11122212),B8_2BIT(22100000),
  B8_2BIT(11111111),B8_2BIT(11100000),
  B8_2BIT(11111111),B8_2BIT(11100000),
  B8_2BIT(11111111),B8_2BIT(11100000),
  B8_2BIT(10011011),B8_2BIT(00100000),
};
const uint8_t PinkyMask[] = 
{
  // Pinky Frame 1
  B8_1BIT(00001110),B8_1BIT(00000000),
  B8_1BIT(00111111),B8_1BIT(10000000),
  B8_1BIT(01111111),B8_1BIT(11000000),
  B8_1BIT(01111111),B8_1BIT(11000000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(11001110),B8_1BIT(01100000),
  // Pinky Frame 2
  B8_1BIT(00001110),B8_1BIT(00000000),
  B8_1BIT(00111111),B8_1BIT(10000000),
  B8_1BIT(01111111),B8_1BIT(11000000),
  B8_1BIT(01111111),B8_1BIT(11000000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(10011011),B8_1BIT(00100000),
};

const struct CRGB PinkyColTab[] =  {  CRGB(255, 0, 0), CRGB(255, 255, 255), CRGB(0, 0, 255)  };
const struct CRGB BlinkyColTab[] =  {  CRGB::Pink, CRGB(255, 255, 255), CRGB(0, 0, 255)  };
const struct CRGB InkyColTab[] =  {  CRGB::Cyan, CRGB(255, 255, 255), CRGB(0, 0, 255)  };
const struct CRGB ClydeColTab[] =  {  CRGB::Orange, CRGB(255, 255, 255), CRGB(0, 0, 255)  };
const uint8_t PacmanLeftData[] = 
{
  // Pacman Open
  B8_2BIT(00021112),B8_2BIT(00000000),
  B8_2BIT(00111111),B8_2BIT(10000000),
  B8_2BIT(00011111),B8_2BIT(11000000),
  B8_2BIT(00001111),B8_2BIT(11200000),
  B8_2BIT(00000011),B8_2BIT(11100000),
  B8_2BIT(00000011),B8_2BIT(11100000),
  B8_2BIT(00001111),B8_2BIT(11200000),
  B8_2BIT(00011111),B8_2BIT(11000000),
  B8_2BIT(00111111),B8_2BIT(10000000),
  B8_2BIT(00021112),B8_2BIT(00000000),
  // Pacman Half
  B8_2BIT(00021112),B8_2BIT(00000000),
  B8_2BIT(00111111),B8_2BIT(10000000),
  B8_2BIT(01111111),B8_2BIT(11000000),
  B8_2BIT(21111111),B8_2BIT(11200000),
  B8_2BIT(00000211),B8_2BIT(11100000),
  B8_2BIT(00000211),B8_2BIT(11100000),
  B8_2BIT(21111111),B8_2BIT(11200000),
  B8_2BIT(01111111),B8_2BIT(11000000),
  B8_2BIT(00111111),B8_2BIT(10000000),
  B8_2BIT(00021112),B8_2BIT(00000000),
  // Pacman Closed
  B8_2BIT(00021112),B8_2BIT(00000000),
  B8_2BIT(00111111),B8_2BIT(10000000),
  B8_2BIT(01111111),B8_2BIT(11000000),
  B8_2BIT(21111111),B8_2BIT(11200000),
  B8_2BIT(11111111),B8_2BIT(11100000),
  B8_2BIT(11111111),B8_2BIT(11100000),
  B8_2BIT(21111111),B8_2BIT(11200000),
  B8_2BIT(01111111),B8_2BIT(11000000),
  B8_2BIT(00111111),B8_2BIT(10000000),
  B8_2BIT(00021112),B8_2BIT(00000000)
};
const uint8_t PacmanLeftMask[] = 
{
  // Pacman Open
  B8_1BIT(00011111),B8_1BIT(00000000),
  B8_1BIT(00111111),B8_1BIT(10000000),
  B8_1BIT(00011111),B8_1BIT(11000000),
  B8_1BIT(00001111),B8_1BIT(11100000),
  B8_1BIT(00000011),B8_1BIT(11100000),
  B8_1BIT(00000011),B8_1BIT(11100000),
  B8_1BIT(00001111),B8_1BIT(11100000),
  B8_1BIT(00011111),B8_1BIT(11000000),
  B8_1BIT(00111111),B8_1BIT(10000000),
  B8_1BIT(00011111),B8_1BIT(00000000),
  // Pacman Half
  B8_1BIT(00011111),B8_1BIT(00000000),
  B8_1BIT(00111111),B8_1BIT(10000000),
  B8_1BIT(01111111),B8_1BIT(11000000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(00000111),B8_1BIT(11100000),
  B8_1BIT(00000111),B8_1BIT(11100000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(01111111),B8_1BIT(11000000),
  B8_1BIT(00111111),B8_1BIT(10000000),
  B8_1BIT(00011111),B8_1BIT(00000000),
  // Pacman Closed
  B8_1BIT(00011111),B8_1BIT(00000000),
  B8_1BIT(00111111),B8_1BIT(10000000),
  B8_1BIT(01111111),B8_1BIT(11000000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(01111111),B8_1BIT(11000000),
  B8_1BIT(00111111),B8_1BIT(10000000),
  B8_1BIT(00011111),B8_1BIT(00000000)
};
const struct CRGB PacmanLeftColTab[] =  {  CRGB(255, 255, 0), CRGB(100, 100, 0), CRGB(255, 255, 255)  };

const uint8_t GhostData[] = 
{
  // Ghost Frame 1
  B8_2BIT(00001110),B8_2BIT(00000000),
  B8_2BIT(00111111),B8_2BIT(10000000),
  B8_2BIT(01111111),B8_2BIT(11000000),
  B8_2BIT(01122122),B8_2BIT(11000000),
  B8_2BIT(11122122),B8_2BIT(11100000),
  B8_2BIT(11111111),B8_2BIT(11100000),
  B8_2BIT(11131313),B8_2BIT(11100000),
  B8_2BIT(11313131),B8_2BIT(31100000),
  B8_2BIT(11111111),B8_2BIT(11100000),
  B8_2BIT(11001110),B8_2BIT(01100000),
  // Ghost Frame 2
  B8_2BIT(00001110),B8_2BIT(00000000),
  B8_2BIT(00111111),B8_2BIT(10000000),
  B8_2BIT(01111111),B8_2BIT(11000000),
  B8_2BIT(01122122),B8_2BIT(11000000),
  B8_2BIT(11122122),B8_2BIT(11100000),
  B8_2BIT(11111111),B8_2BIT(11100000),
  B8_2BIT(11131313),B8_2BIT(11100000),
  B8_2BIT(11313131),B8_2BIT(31100000),
  B8_2BIT(11111111),B8_2BIT(11100000),
  B8_2BIT(10011011),B8_2BIT(00100000)
};
const uint8_t GhostMask[] = 
{
  // Ghost Frame 1
  B8_1BIT(00001110),B8_1BIT(00000000),
  B8_1BIT(00111111),B8_1BIT(10000000),
  B8_1BIT(01111111),B8_1BIT(11000000),
  B8_1BIT(01111111),B8_1BIT(11000000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(11001110),B8_1BIT(01100000),
  // Ghost Frame 2
  B8_1BIT(00001110),B8_1BIT(00000000),
  B8_1BIT(00111111),B8_1BIT(10000000),
  B8_1BIT(01111111),B8_1BIT(11000000),
  B8_1BIT(01111111),B8_1BIT(11000000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(11111111),B8_1BIT(11100000),
  B8_1BIT(10011011),B8_1BIT(00100000)
};
const struct CRGB GhostColTab[] =  {  CRGB(0, 0, 255), CRGB(255, 255, 255), CRGB(255, 90, 120)  };

cSprite SprPacmanRight(MY_SPRITE_WIDTH, MY_SPRITE_HEIGHT, PacmanRightData, PACMAN_FRAMES, _2BIT, PacmanRightColTab, PacmanRightMask);
cSprite SprMarioRight(MARIO_SIZE, MARIO_SIZE, MarioData, MARIO_FRAMES, _2BIT, MarioColTab, MarioMask);
cSprite SprMarioRight2(MARIO_SIZE, MARIO_SIZE, MarioData, MARIO_FRAMES, _2BIT, MarioColTab, MarioMask);
cSprite SprLuigiRight(MARIO_SIZE, MARIO_SIZE, MarioData, MARIO_FRAMES, _2BIT, LuigiColTab, MarioMask);
cSprite SprLuigiRight2(MARIO_SIZE, MARIO_SIZE, MarioData, MARIO_FRAMES, _2BIT, LuigiColTab, MarioMask);
cSprite SprMarioRight3(MARIO_SIZE, MARIO_SIZE, MarioData, MARIO_FRAMES, _2BIT, MarioColTab, MarioMask);
cSprite SprMarioRight4(MARIO_SIZE, MARIO_SIZE, MarioData, MARIO_FRAMES, _2BIT, MarioColTab, MarioMask);
cSprite SprPinky(MY_SPRITE_WIDTH, MY_SPRITE_HEIGHT, PinkyData, PINKY_FRAMES, _2BIT, PinkyColTab, PinkyMask);
cSprite SprBlinky(MY_SPRITE_WIDTH, MY_SPRITE_HEIGHT, PinkyData, PINKY_FRAMES, _2BIT, BlinkyColTab, PinkyMask);
cSprite SprInky(MY_SPRITE_WIDTH, MY_SPRITE_HEIGHT, PinkyData, PINKY_FRAMES, _2BIT, InkyColTab, PinkyMask);
cSprite SprClyde(MY_SPRITE_WIDTH, MY_SPRITE_HEIGHT, PinkyData, PINKY_FRAMES, _2BIT, ClydeColTab, PinkyMask);
cSprite SprPacmanLeft(MY_SPRITE_WIDTH, MY_SPRITE_HEIGHT, PacmanLeftData, PACMAN_FRAMES, _2BIT, PacmanLeftColTab, PacmanLeftMask);
cSprite SprGhost(MY_SPRITE_WIDTH, MY_SPRITE_HEIGHT, GhostData, PINKY_FRAMES, _2BIT, GhostColTab, GhostMask);
cSprite SprMushroom(MARIO_SIZE, MARIO_SIZE, MushroomData, 1, _2BIT, MushroomColTab, MushroomMask);
cSprite SprMushroom2(MARIO_SIZE, MARIO_SIZE, MushroomData, 1, _2BIT, MushroomColTab, MushroomMask);
cSprite SprGoomba(MARIO_SIZE, MARIO_SIZE, GoombaData, 2, _2BIT, GoombaColTab, GoombaMask);
cSprite SprGoomba2(MARIO_SIZE, MARIO_SIZE, GoombaData, 2, _2BIT, GoombaColTab, GoombaMask);
cSprite SprBrow(BROW_WIDTH, BROW_HEIGHT, BrowData, 20, _3BIT, BrowColTab, BrowMask);
cSprite SprCompCube1(15, 15, CompCubeData, 1, _2BIT, CompCubeColTab, CompCubeMask);
cSprite SprCompCube2(15, 15, CompCubeData, 1, _2BIT, CompCubeColTab, CompCubeMask);
cSprite SprCompCube3(15, 15, CompCubeData, 1, _2BIT, CompCubeColTab, CompCubeMask);
cSprite SprCompCube4(15, 15, CompCubeData, 1, _2BIT, CompCubeColTab, CompCubeMask);
cSprite SprMaus(23, 16, MausData, 7, _4BIT, MausColTab, MausMask);

int state=1;
int nextstate = 0;

void setup()
{
  FastLED.addLeds<CHIPSET, DATA_PIN, CLK_PIN, COLOR_ORDER, DATA_RATE_MHZ(5)>(leds[0], leds.Size()).setCorrection(TypicalLEDStrip);
  FastLED.setBrightness(30);
  FastLED.setDither(0);
  FastLED.clear(true);
  gPal = HeatColors_p;
  delay(500);
  delay(1000);
  count = 0;
  FastLED.show();

  ScrollingMsg.SetFont(MatriseFontData);
  ScrollingMsg.Init(&leds, leds.Width(), ScrollingMsg.FontHeight() + 1, 0, 5);
  ScrollingMsg.SetText((unsigned char *)TxtDemo, sizeof(TxtDemo) - 1);
  ScrollingMsg.SetTextColrOptions(COLR_RGB | COLR_SINGLE, 0xff, 0x00, 0xff);
  Options = INSTANT_OPTIONS_MODE;
  ScrollingMsg.SetOptionsChangeMode(Options);
  
  PlasmaShift = (random8(0, 5) * 32) + 64;
  PlasmaTime = 0;

  btnA.begin();
  btnB.begin();
  btnC.begin();
  btnD.begin();

}

// List of patterns to cycle through.  Each is defined as a separate function below.
typedef void (*SimplePatternList[])();
  SimplePatternList gPatterns = { Dcon, MultiMario, MultiMario, Matrix, Maus, Circles, TrippyRainbow, Brow, Brow, Glitter, Glitter, CompCube, Plasma, Noise, Fireplace, Wave, Lines};
  SimplePatternList gPatterns1 = { Dcon, MultiMario, MultiMario, Matrix, Maus, Circles, TrippyRainbow, Brow, Brow, Glitter, Glitter, CompCube, Plasma, Noise, Fireplace, Wave, Lines};
  SimplePatternList gPatterns2 = { Maus, CompCube, MultiMario, Brow };
  SimplePatternList gPatterns3 = { Circles, TrippyRainbow, Glitter, Plasma,  Lines, Noise};
  SimplePatternList gPatterns4 = { Fireplace, Wave, Dcon };

uint8_t gCurrentPatternNumber = 0; // Index number of which pattern is current
uint8_t gCurrentPatternNumber1 = 0; // Index number of which pattern is current
uint8_t gCurrentPatternNumber2 = 0; // Index number of which pattern is current
uint8_t gCurrentPatternNumber3 = 0; // Index number of which pattern is current
uint8_t gCurrentPatternNumber4 = 0; // Index number of which pattern is current

void loop()
{
  random16_add_entropy( random());

  btnA.read();
  btnB.read();
  btnC.read();
  btnD.read();
  if (btnA.pressed())
  {
  state = 2;
  Sprites.RemoveSprite(&SprMushroom);
  Sprites.RemoveSprite(&SprMarioRight);
  Sprites.RemoveSprite(&SprLuigiRight);
  Sprites.RemoveSprite(&SprGoomba);
  Sprites.RemoveSprite(&SprMushroom2);
  Sprites.RemoveSprite(&SprMarioRight2);
  Sprites.RemoveSprite(&SprLuigiRight2);
  Sprites.RemoveSprite(&SprGoomba2);
  Sprites.RemoveSprite(&SprBrow);
  Sprites.RemoveSprite(&SprMaus);
  Sprites.RemoveSprite(&SprCompCube1);
  Sprites.RemoveSprite(&SprCompCube2);
  Sprites.RemoveSprite(&SprCompCube3);
  Sprites.RemoveSprite(&SprCompCube4);
  count = 0;
  mcount = 0;
  eye_count = 0;
  cube_count = 0;
  mauscount = 0;
  nextstate = 0;
  }   
    
  if (btnB.pressed())
  {
  state = 1;
  Sprites.RemoveSprite(&SprMushroom);
  Sprites.RemoveSprite(&SprMarioRight);
  Sprites.RemoveSprite(&SprLuigiRight);
  Sprites.RemoveSprite(&SprGoomba);
  Sprites.RemoveSprite(&SprMushroom2);
  Sprites.RemoveSprite(&SprMarioRight2);
  Sprites.RemoveSprite(&SprLuigiRight2);
  Sprites.RemoveSprite(&SprGoomba2);
  Sprites.RemoveSprite(&SprBrow);
  Sprites.RemoveSprite(&SprMaus);
  Sprites.RemoveSprite(&SprCompCube1);
  Sprites.RemoveSprite(&SprCompCube2);
  Sprites.RemoveSprite(&SprCompCube3);
  Sprites.RemoveSprite(&SprCompCube4);
  count = 0;
  mcount = 0;
  eye_count = 0;
  cube_count = 0;
  mauscount = 0;
  nextstate = 0;
  }   
     
  if (btnC.pressed())
  {
  //state = 4;
  Sprites.RemoveSprite(&SprMushroom);
  Sprites.RemoveSprite(&SprMarioRight);
  Sprites.RemoveSprite(&SprLuigiRight);
  Sprites.RemoveSprite(&SprGoomba);
  Sprites.RemoveSprite(&SprMushroom2);
  Sprites.RemoveSprite(&SprMarioRight2);
  Sprites.RemoveSprite(&SprLuigiRight2);
  Sprites.RemoveSprite(&SprGoomba2);
  Sprites.RemoveSprite(&SprBrow);
  Sprites.RemoveSprite(&SprMaus);
  Sprites.RemoveSprite(&SprCompCube1);
  Sprites.RemoveSprite(&SprCompCube2);
  Sprites.RemoveSprite(&SprCompCube3);
  Sprites.RemoveSprite(&SprCompCube4);
  count = 0;
  mcount = 0;
  eye_count = 0;
  cube_count = 0;
  mauscount = 0;
  nextstate = 1;
  }
       
  if (btnD.pressed())
  {
  state = 3;
  Sprites.RemoveSprite(&SprMushroom);
  Sprites.RemoveSprite(&SprMarioRight);
  Sprites.RemoveSprite(&SprLuigiRight);
  Sprites.RemoveSprite(&SprGoomba);
  Sprites.RemoveSprite(&SprMushroom2);
  Sprites.RemoveSprite(&SprMarioRight2);
  Sprites.RemoveSprite(&SprLuigiRight2);
  Sprites.RemoveSprite(&SprGoomba2);
  Sprites.RemoveSprite(&SprBrow);
  Sprites.RemoveSprite(&SprMaus);
  Sprites.RemoveSprite(&SprCompCube1);
  Sprites.RemoveSprite(&SprCompCube2);
  Sprites.RemoveSprite(&SprCompCube3);
  Sprites.RemoveSprite(&SprCompCube4);
  count = 0;
  mcount = 0;
  eye_count = 0;
  cube_count = 0;
  mauscount = 0;
  nextstate = 0;
  }
    if (state == 1)
  {
  	gPatterns1[gCurrentPatternNumber1]();
  }
   if (state == 2)
  {
  	MultiMario();
  }
  if (state == 3)
  {
  	gPatterns3[gCurrentPatternNumber3]();
  }
  if (nextstate == 1)
  {
  	nextPattern();
  }

  FastLED.show();  

EVERY_N_MILLISECONDS( 5 ) { gHue=gHue+12; }
  // do some periodic updates
  EVERY_N_SECONDS( 40 ) { nextPattern(); } // change patterns periodically
}

void nextPattern()
{
  // add one to the current pattern number, and wrap around at the end
  gCurrentPatternNumber = (gCurrentPatternNumber + 1) % ARRAY_SIZE( gPatterns);
  gCurrentPatternNumber1 = (gCurrentPatternNumber1 + 1) % ARRAY_SIZE( gPatterns1);
  gCurrentPatternNumber2 = (gCurrentPatternNumber2 + 1) % ARRAY_SIZE( gPatterns2);
  gCurrentPatternNumber3 = (gCurrentPatternNumber3 + 1) % ARRAY_SIZE( gPatterns3);
  gCurrentPatternNumber4 = (gCurrentPatternNumber4 + 1) % ARRAY_SIZE( gPatterns4);
  nextstate = 0;
}

void cooldown()
{
  FastLED.clear();
  FastLED.delay(6000);
}

void TrippyRainbow()
{
  int16_t sx, sy, x, y;
  uint8_t h;

  FastLED.clear();
  
  h = hue;
  if (counter < 1500)
  {
    // ** Fill LED's with diagonal stripes
    for (x=0; x<(leds.Width()+leds.Height()); ++x)
    {
      leds.DrawLine(x - leds.Height(), leds.Height() - 1, x, 0, CHSV(h, 255, 192));
      h+=4;
    }
  }
  else
  {
    // ** Fill LED's with horizontal stripes
    for (y=0; y<leds.Height(); ++y)
    {
      leds.DrawLine(0, y, leds.Width() - 1, y, CHSV(h, 255, 192));
      h+=4;
    }
  }
  hue+=4;

  if (counter < 0)
    ;
  else if (counter < 100)
   leds.QuadrantMirror();
  else if (counter < 200)
    leds.QuadrantBottomTriangleMirror();

  counter++;
  if (counter >= 200)
    counter = 0;
  FastLED.show();
  FastLED.delay(10);
}

void Dcon()
{
    FastLED.clear();
    if (ScrollingMsg.UpdateText() == -1)
  {
    ScrollingMsg.SetText((unsigned char *)TxtDemo, sizeof(TxtDemo) - 1);
    Options ^= INSTANT_OPTIONS_MODE;
    ScrollingMsg.SetOptionsChangeMode(0);
  }
  else
    FastLED.show();
  delay(10);
}

void MultiMario()
{
    FastLED.clear();
    Sprites.RemoveSprite(&SprBrow);
    Sprites.RemoveSprite(&SprMaus);
    Sprites.RemoveSprite(&SprCompCube1);
    Sprites.RemoveSprite(&SprCompCube2);
    Sprites.RemoveSprite(&SprCompCube3);
    Sprites.RemoveSprite(&SprCompCube4);
    
    for (int16_t x=0; x<64; x++)
    {
      for (int16_t y=0; y<16; y++)
      {
        leds(x, y) = CHSV(150,200,100);
      }
    }

  Sprites.UpdateSprites();
  Sprites.DetectCollisions();
  if (count == 0)
  {
  SprMushroom.SetPositionFrameMotionOptions(-10/*X*/, 0/*Y*/, 0/*Frame*/, 4/*FrameRate*/, +1/*XChange*/, 2/*XRate*/, 0/*YChange*/, 0/*YRate*/, SPRITE_DETECT_EDGE | SPRITE_DETECT_COLLISION);
    Sprites.AddSprite(&SprMushroom);
  count = 1;
  }
  if (mcount == 0)
  {
   if (SprMushroom.m_X == 0)
   {
    SprMarioRight.SetPositionFrameMotionOptions(-15/*X*/, 0/*Y*/, 0/*Frame*/, 4/*FrameRate*/, +1/*XChange*/, 2/*XRate*/, 0/*YChange*/, 0/*YRate*/, SPRITE_DETECT_EDGE | SPRITE_DETECT_COLLISION);
    Sprites.AddSprite(&SprMarioRight);
   }

   if (SprMarioRight.m_X == 0)
   {
    SprLuigiRight.SetPositionFrameMotionOptions(-15/*X*/, 0/*Y*/, 0/*Frame*/, 4/*FrameRate*/, +1/*XChange*/, 2/*XRate*/, 0/*YChange*/, 0/*YRate*/, SPRITE_DETECT_EDGE | SPRITE_DETECT_COLLISION);
    Sprites.AddSprite(&SprLuigiRight);
   }
   
   if (SprLuigiRight.m_X == 1)
   {
    SprGoomba.SetPositionFrameMotionOptions(-16/*X*/, 0/*Y*/, 0/*Frame*/, 4/*FrameRate*/, +1/*XChange*/, 2/*XRate*/, 0/*YChange*/, 0/*YRate*/, SPRITE_DETECT_EDGE | SPRITE_DETECT_COLLISION);
    Sprites.AddSprite(&SprGoomba);
    mcount = 1;
   }
    
  }

  
   if (SprMushroom.m_X == 49)
   {
    SprMushroom2.SetPositionFrameMotionOptions(-15/*X*/, 0/*Y*/, 0/*Frame*/, 4/*FrameRate*/, +1/*XChange*/, 2/*XRate*/, 0/*YChange*/, 0/*YRate*/, SPRITE_DETECT_EDGE | SPRITE_DETECT_COLLISION);
    Sprites.AddSprite(&SprMushroom2);
   }
      if (SprMushroom2.m_X == 49)
   {
    SprMushroom.SetPositionFrameMotionOptions(-15/*X*/, 0/*Y*/, 0/*Frame*/, 4/*FrameRate*/, +1/*XChange*/, 2/*XRate*/, 0/*YChange*/, 0/*YRate*/, SPRITE_DETECT_EDGE | SPRITE_DETECT_COLLISION);
    Sprites.AddSprite(&SprMushroom);
   }

      if (SprMarioRight.m_X == 49)
   {
    SprMarioRight2.SetPositionFrameMotionOptions(-15/*X*/, 0/*Y*/, 0/*Frame*/, 4/*FrameRate*/, +1/*XChange*/, 2/*XRate*/, 0/*YChange*/, 0/*YRate*/, SPRITE_DETECT_EDGE | SPRITE_DETECT_COLLISION);
    Sprites.AddSprite(&SprMarioRight2);
   }
      if (SprMarioRight2.m_X == 49)
   {
    SprMarioRight.SetPositionFrameMotionOptions(-15/*X*/, 0/*Y*/, 0/*Frame*/, 4/*FrameRate*/, +1/*XChange*/, 2/*XRate*/, 0/*YChange*/, 0/*YRate*/, SPRITE_DETECT_EDGE | SPRITE_DETECT_COLLISION);
    Sprites.AddSprite(&SprMarioRight);
   }

      if (SprLuigiRight.m_X == 49)
   {
    SprLuigiRight2.SetPositionFrameMotionOptions(-15/*X*/, 0/*Y*/, 0/*Frame*/, 4/*FrameRate*/, +1/*XChange*/, 2/*XRate*/, 0/*YChange*/, 0/*YRate*/, SPRITE_DETECT_EDGE | SPRITE_DETECT_COLLISION);
    Sprites.AddSprite(&SprLuigiRight2);
   }
      if (SprLuigiRight2.m_X == 49)
   {
    SprLuigiRight.SetPositionFrameMotionOptions(-15/*X*/, 0/*Y*/, 0/*Frame*/, 4/*FrameRate*/, +1/*XChange*/, 2/*XRate*/, 0/*YChange*/, 0/*YRate*/, SPRITE_DETECT_EDGE | SPRITE_DETECT_COLLISION);
    Sprites.AddSprite(&SprLuigiRight);
   }

      if (SprGoomba.m_X == 49)
   {
    SprGoomba2.SetPositionFrameMotionOptions(-15/*X*/, 0/*Y*/, 0/*Frame*/, 4/*FrameRate*/, +1/*XChange*/, 2/*XRate*/, 0/*YChange*/, 0/*YRate*/, SPRITE_DETECT_EDGE | SPRITE_DETECT_COLLISION);
    Sprites.AddSprite(&SprGoomba2);
   }
      if (SprGoomba2.m_X == 49)
   {
    SprGoomba.SetPositionFrameMotionOptions(-15/*X*/, 0/*Y*/, 0/*Frame*/, 4/*FrameRate*/, +1/*XChange*/, 2/*XRate*/, 0/*YChange*/, 0/*YRate*/, SPRITE_DETECT_EDGE | SPRITE_DETECT_COLLISION);
    Sprites.AddSprite(&SprGoomba);
   }

  Sprites.RenderSprites();
  FastLED.show();
  delay(10);
  count++;
  eye_count=0;
}

void Plasma()
{
    #define PLASMA_X_FACTOR  10
    #define PLASMA_Y_FACTOR  10
    for (int16_t x=0; x<64; x++)
    {
      for (int16_t y=0; y<16; y++)
      {
        int16_t r = sin16(PlasmaTime) / 256;
        int16_t h = sin16(x * r * PLASMA_X_FACTOR + PlasmaTime) + cos16(y * (-r) * PLASMA_Y_FACTOR + PlasmaTime) + sin16(y * x * (cos16(-PlasmaTime) / 256) / 2);
        leds(x, y) = CHSV((uint8_t)((h / 256) + 128), 255, 130);
      }
    }
    uint16_t OldPlasmaTime = PlasmaTime;
    PlasmaTime += PlasmaShift;
    if (OldPlasmaTime > PlasmaTime)
    PlasmaShift = (random8(0, 5) * 32) + 64;
    leds.HorizontalMirror();  
    FastLED.show();
    FastLED.delay(10);
}

void Wave()
{
  uint8_t h = sin8(angle);
  leds.ShiftLeft();

  for (int16_t y=leds.Height()-1; y>=0; --y)
  {
    if (h > 100 && h < 220)
	  {
    leds(leds.Width()-1, y) = CHSV(h, 255, 255);
    }
    h += 32;
  }
  angle += 12;
  FastLED.show();
  delay(20);
}

void Glitter()
{
fadeToBlackBy( leds[0], 1024, 90);
int star1, star2, star3, star4, star5, star6, star7, star8, star9, star10, star11, star12, star13, star14, star15, star16, star17, star18, star19, star20, star21, star22, star23, star24;
star1 = random16(1023);
star2 = random16(1023);
star3 = random16(1023);
star4 = random16(1023);
star5 = random16(1023);
star6 = random16(1023);
star7 = random16(1023);
star8 = random16(1023);
star9 = random16(1023);
star10 = random16(1023);
star11 = random16(1023);
star12 = random16(1023);
star13 = random16(1023);
star14 = random16(1023);
star15 = random16(1023);
star16 = random16(1023);
star17 = random16(1023);
star18 = random16(1023);
star19 = random16(1023);
star20 = random16(1023);
star21 = random16(1023);
star22 = random16(1023);
star23 = random16(1023);
star24 = random16(1023);

leds(star1) = CRGB::White;
leds(star2) = CRGB::White;
leds(star3) = CRGB::White;
leds(star4) = CRGB::Red;
leds(star5) = CRGB::Green;
leds(star6) = CRGB::Blue;
leds(star7) = CRGB::SkyBlue;
leds(star8) = CRGB::LimeGreen;
leds(star9) = CRGB::Pink;
leds(star10) = CRGB::Red;
leds(star11) = CRGB::Green;
leds(star12) = CRGB::Blue;
leds(star13) = CRGB::White;
leds(star14) = CRGB::White;
leds(star15) = CRGB::White;
leds(star16) = CRGB::Red;
leds(star17) = CRGB::Green;
leds(star18) = CRGB::Blue;
leds(star19) = CRGB::SkyBlue;
leds(star20) = CRGB::LimeGreen;
leds(star21) = CRGB::Pink;
leds(star22) = CRGB::Red;
leds(star23) = CRGB::Green;
leds(star24) = CRGB::Blue;

FastLED.show();
delay(30);
}

void Matrix()
{
int star1, star2, star3, star4;
star1 = random16(64);
star2 = random16(64);
star3 = random16(64);
star4 = random16(64);

leds.ShiftDown();
leds(star1, leds.Height()-1) = CRGB::Green;
leds(star2, leds.Height()-1) = CRGB::Green;
leds(star3, leds.Height()-1) = CRGB::Green;
leds(star4, leds.Height()-1) = CRGB::Green;

FastLED.show();
delay(15);
}

void Brow()
{
  Sprites.RemoveSprite(&SprMushroom);
  Sprites.RemoveSprite(&SprMarioRight);
  Sprites.RemoveSprite(&SprLuigiRight);
  Sprites.RemoveSprite(&SprGoomba);
  Sprites.RemoveSprite(&SprMushroom2);
  Sprites.RemoveSprite(&SprMarioRight2);
  Sprites.RemoveSprite(&SprLuigiRight2);
  Sprites.RemoveSprite(&SprGoomba2);
  Sprites.RemoveSprite(&SprCompCube1);
  Sprites.RemoveSprite(&SprCompCube2);
  Sprites.RemoveSprite(&SprCompCube3);
  Sprites.RemoveSprite(&SprCompCube4);
  Sprites.RemoveSprite(&SprMaus);
  
    for (int16_t x=0; x<64; x++)
    {
      for (int16_t y=0; y<16; y++)
      {
        leds(x, y) = CHSV(150,200,90);
      }
    }
  randbrow = random8(1,150);
  Sprites.UpdateSprites();
  Sprites.DetectCollisions();
  if (eye_count == 0)
  {
  SprBrow.SetPositionFrameMotionOptions(20/*X*/, 1/*Y*/, 0/*Frame*/, 2/*FrameRate*/, 0/*XChange*/, 2/*XRate*/, 0/*YChange*/, 0/*YRate*/, SPRITE_DETECT_EDGE | SPRITE_DETECT_COLLISION);
  Sprites.AddSprite(&SprBrow);
  eye_count = 1;
  }
if (SprBrow.GetCurrentFrame() != 19)
{
  if (randbrow == 2)
  {
    for (int right=SprBrow.m_X; right > 11; right--)
    {
      FastLED.clear();
        for (int16_t x=0; x<64; x++)
     {
        for (int16_t y=0; y<16; y++)
        {
          leds(x, y) = CHSV(150,200,90);
        }
      }
  SprBrow.SetPosition(right,1);
  Sprites.RenderSprites();
  FastLED.delay(40);
  }
 }

  if (randbrow == 5)
  {
    for (int right=SprBrow.m_X; right < 29; right++)
    {
      FastLED.clear();
        for (int16_t x=0; x<64; x++)
     {
        for (int16_t y=0; y<16; y++)
        {
          leds(x, y) = CHSV(150,200,90);
        }
      }
  SprBrow.SetPosition(right,1);
  Sprites.RenderSprites();
  FastLED.delay(40);
  }
 }
   if (randbrow == 8 || randbrow == 10 || randbrow == 16 || randbrow == 100 | randbrow == 98 || randbrow == 69)
  {
    if (SprBrow.m_X > 20)
    {
        for (int right=SprBrow.m_X; right > 19; right--)
        {
          FastLED.clear();
            for (int16_t x=0; x<64; x++)
         {
            for (int16_t y=0; y<16; y++)
            {
              leds(x, y) = CHSV(150,200,90);
            }
          }
      SprBrow.SetPosition(right,1);
      Sprites.RenderSprites();
      FastLED.delay(40);
      }
    }
        if (SprBrow.m_X < 20)
    {
        for (int right=SprBrow.m_X; right < 21; right++)
        {
          FastLED.clear();
            for (int16_t x=0; x<64; x++)
         {
            for (int16_t y=0; y<16; y++)
            {
              leds(x, y) = CHSV(150,200,90);
            }
          }
      SprBrow.SetPosition(right,1);
      Sprites.RenderSprites();
      FastLED.delay(40);
      }
    }
    
 }
  else
  {
    randbrow = randbrow;
  }
}

  Sprites.RenderSprites();
  FastLED.show();
  FastLED.delay(30);
  count = 0;
  mcount = 0;
  cube_count = 0;
  mauscount = 0;
}

void CompCube()
{
  Sprites.RemoveSprite(&SprMushroom);
  Sprites.RemoveSprite(&SprMarioRight);
  Sprites.RemoveSprite(&SprLuigiRight);
  Sprites.RemoveSprite(&SprGoomba);
  Sprites.RemoveSprite(&SprMushroom2);
  Sprites.RemoveSprite(&SprMarioRight2);
  Sprites.RemoveSprite(&SprLuigiRight2);
  Sprites.RemoveSprite(&SprGoomba2);
  Sprites.RemoveSprite(&SprBrow);
  Sprites.RemoveSprite(&SprMaus);
  
  FastLED.clear();
  Sprites.UpdateSprites();
  Sprites.DetectCollisions();
  if (cube_count == 0)
    {
    SprCompCube1.SetPositionFrameMotionOptions(0/*X*/, 1/*Y*/, 0/*Frame*/, 4/*FrameRate*/, +1/*XChange*/, 2/*XRate*/, 0/*YChange*/, 0/*YRate*/, SPRITE_DETECT_EDGE | SPRITE_DETECT_COLLISION);
    Sprites.AddSprite(&SprCompCube1);
    SprCompCube3.SetPositionFrameMotionOptions(32/*X*/, 1/*Y*/, 0/*Frame*/, 4/*FrameRate*/, +1/*XChange*/, 2/*XRate*/, 0/*YChange*/, 0/*YRate*/, SPRITE_DETECT_EDGE | SPRITE_DETECT_COLLISION);
    Sprites.AddSprite(&SprCompCube3);
    cube_count = 1;
    }

    if (SprCompCube1.m_X == 50)
   {
    SprCompCube2.SetPositionFrameMotionOptions(-14/*X*/, 1/*Y*/, 0/*Frame*/, 4/*FrameRate*/, +1/*XChange*/, 2/*XRate*/, 0/*YChange*/, 0/*YRate*/, SPRITE_DETECT_EDGE | SPRITE_DETECT_COLLISION);
    Sprites.AddSprite(&SprCompCube2);
   }

       if (SprCompCube2.m_X == 50)
   {
    SprCompCube1.SetPositionFrameMotionOptions(-14/*X*/, 1/*Y*/, 0/*Frame*/, 4/*FrameRate*/, +1/*XChange*/, 2/*XRate*/, 0/*YChange*/, 0/*YRate*/, SPRITE_DETECT_EDGE | SPRITE_DETECT_COLLISION);
    Sprites.AddSprite(&SprCompCube1);
   }

       if (SprCompCube3.m_X == 50)
   {
    SprCompCube4.SetPositionFrameMotionOptions(-14/*X*/, 1/*Y*/, 0/*Frame*/, 4/*FrameRate*/, +1/*XChange*/, 2/*XRate*/, 0/*YChange*/, 0/*YRate*/, SPRITE_DETECT_EDGE | SPRITE_DETECT_COLLISION);
    Sprites.AddSprite(&SprCompCube4);
   }

       if (SprCompCube4.m_X == 50)
   {
    SprCompCube3.SetPositionFrameMotionOptions(-14/*X*/, 1/*Y*/, 0/*Frame*/, 4/*FrameRate*/, +1/*XChange*/, 2/*XRate*/, 0/*YChange*/, 0/*YRate*/, SPRITE_DETECT_EDGE | SPRITE_DETECT_COLLISION);
    Sprites.AddSprite(&SprCompCube3);
   }
      Sprites.RenderSprites();
      FastLED.delay(30);
}

void Fireplace () {
  FastLED.clear();
  static unsigned int spark[WIDTH]; // base heat
  CRGB stack[WIDTH][HEIGHT];        // stacks that are cooler
 
  // 1. Generate sparks to re-heat
  for( int i = 0; i < WIDTH; i++) {
    if (spark[i] < HOT ) {
      int base = HOT * 2;
      spark[i] = random16( base, MAXHOT );
    }
  }
  
  // 2. Cool all the sparks
  for( int i = 0; i < WIDTH; i++) {
    spark[i] = qsub8( spark[i], random8(0, COOLING) );
  }
  
  // 3. Build the stack
  /*    This works on the idea that pixels are "cooler"
        as they get further from the spark at the bottom */
  for( int i = 0; i < WIDTH; i++) {
    unsigned int heat = constrain(spark[i], HOT/2, MAXHOT);
    for( int j = HEIGHT-1; j >= 0; j--) {
      /* Calculate the color on the palette from how hot this
         pixel is */
      byte index = constrain(heat, 0, HOT);
      stack[i][j] = ColorFromPalette( gPal, index );
      
      /* The next higher pixel will be "cooler", so calculate
         the drop */
      unsigned int drop = random8(0,HOT);
      if (drop > heat) heat = 0; // avoid wrap-arounds from going "negative"
      else heat -= drop;
 
      heat = constrain(heat, 0, MAXHOT);
    }
  }
  // 4. map stacks to led array
  for( int i = 0; i < WIDTH; i++) {
  for( int j = 0; j < HEIGHT; j++) {
     leds(i, j) = stack[i][HEIGHT-j-1];
  }
  }
  FastLED.delay(30);
}

void fillnoise8() {
  for(int i = 0; i < MAX_DIMENSION; i++) 
  {
    int ioffset = scale * i;
    for(int j = 0; j < MAX_DIMENSION; j++) 
    {
      int joffset = scale * j;
      noise[i][j] = inoise8(f + ioffset,g + joffset,h);
    }
  }
  h += speed;
}

void Noise() {
  FastLED.clear();
  
  static uint8_t ihue=0;
  fillnoise8();
  for(int i = 0; i < 32; i++) 
  {
    for(int j = 0; j < HEIGHT; j++) 
    {
       leds(i,j) = CHSV(ihue + (noise[j][i]>>2),200,noise[i][j]);
    }
  }
  ihue+=random8(0,15);
  leds.HorizontalMirror();
  LEDS.show();
}

void Maus()
{
    Sprites.RemoveSprite(&SprMushroom);
    Sprites.RemoveSprite(&SprMarioRight);
    Sprites.RemoveSprite(&SprLuigiRight);
    Sprites.RemoveSprite(&SprGoomba);
    Sprites.RemoveSprite(&SprMushroom2);
    Sprites.RemoveSprite(&SprMarioRight2);
    Sprites.RemoveSprite(&SprLuigiRight2);
    Sprites.RemoveSprite(&SprGoomba2);
    Sprites.RemoveSprite(&SprBrow);
    Sprites.RemoveSprite(&SprCompCube1);
    Sprites.RemoveSprite(&SprCompCube2);
    Sprites.RemoveSprite(&SprCompCube3);
    Sprites.RemoveSprite(&SprCompCube4);

    fadeToBlackBy( leds[0], 1024, 50);
    //FastLED.clear();
    Sprites.UpdateSprites();
    if (mauscount == 0)
    {
    	SprMaus.SetPositionFrameMotionOptions(20/*X*/, 0/*Y*/, 0/*Frame*/, 6/*FrameRate*/, +1/*XChange*/, 2/*XRate*/, 0/*YChange*/, 0/*YRate*/, SPRITE_DETECT_EDGE | SPRITE_DETECT_COLLISION | SPRITE_X_KEEPIN | SPRITE_Y_KEEPIN);
  	Sprites.AddSprite(&SprMaus);
    	mauscount = 1;
    }
    
    Sprites.RenderSprites();
    
    FastLED.show();
  
}

void Circles()
{
  fadeToBlackBy( leds[0], 1024, 10);
  leds.DrawCircle(random16(WIDTH), random16(HEIGHT), random16(1,12), CHSV(gHue,255,200));
  //FastLED.delay(20);
}

void Lines()
{
  fadeToBlackBy( leds[0], 1024, 15);
  leds.DrawLine(random16(64), random16(16), random16(64), random16(16), CHSV(gHue,255,200));
}


